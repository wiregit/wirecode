<!-- top level ant file -->
<project name="limewire" default="compile-src" basedir=".">

    <property name="limewire.home" location="${basedir}"/>

    <import file="components/build.xml"/>
    <import file="core/build.xml"/>
    <import file="gui/build.xml" />
    <import file="tests/build.xml" />
    <import file="components/core-glue/build.xml"/>
    
    <target name="initialize" depends="lw-core.initialize, lw-gui.initialize, lw-tests.initialize, lw-components.initialize, lw-core-glue.initialize" unless="initialized.limewire">
        <property name="limewire.components.limewire.home"
                  location="${limewire.home}"/>
        <property name="limewire.components.limewire.tests"
                  location="${limewire.components.tests.home}"/>
        <do.setup-properties component="limewire"/>
    </target>
    
    <target name="compile"
            description="Compiles all code."
            depends="initialize, lw-components.compile-core-src, lw-components.compile-ui-src, lw-core.compile-core, lw-gui.compile-gui, lw-tests.compile-src, lw-tests.compile-tests, lw-core-glue.compile-src"/>
    
    <target name="compile-src"
            description="Compiles all source code (not tests)."
            depends="initialize, lw-components.compile-core-src, lw-components.compile-ui-src, lw-core.compile-core, lw-gui.compile-gui, lw-core-glue.compile-src"/>
    
    <target name="compile-tests"
            description="Compiles all code required for tests."
            depends="initialize, lw-components.compile-tests, lw-tests.compile-src, lw-tests.compile-tests, lw-core-glue.compile-tests"/>
    
    <target name="clean" 
            description="Cleans everything."
            depends="initialize, lw-components.clean, clean-core, clean-gui, lw-tests.clean, lw-core-glue.clean">
        <do.clean component="limewire"/>
        <delete dir="${limewire.components.limewire.home}/unused"/>
    </target>
    
    <target name="clean-src"
            description="Cleans artifacts from compiling src."
            depends="initialize, lw-components.clean-src, clean-core, clean-gui, lw-core-glue.clean-src"/>
    
    <target name="clean-tests"
            description="Cleans artifacts from compiling tests."
            depends="initialize, lw-components.clean-tests, lw-tests.clean, lw-core-glue.clean-tests">
        <do.clean-testData component="limewire"/>
    </target>
        
    <target name="test-all"
            description="Tests all components and LimeWire tests."
            depends="compile, lw-tests.test-all, lw-components.test-all, lw-core-glue.test-all">
        <mkdir dir="${tests.limewire.components.limewire.xml}"/>
        <do.tests2html component="limewire">
            <more-xml-locations>
                <fileset dir="${tests.limewire.components.all.xml}" includes="TEST-*.xml"/>
                <fileset dir="${tests.limewire.components.tests.xml}" includes="TEST-*.xml"/>
                <fileset dir="${tests.limewire.components.core-glue.xml}" includes="TEST-*.xml"/>
            </more-xml-locations>
        </do.tests2html>
    </target>    
    
    <target name="test2html" depends="initialize">
        <mkdir dir="${tests.limewire.components.limewire.xml}"/>
        <do.tests2html component="limewire">
            <more-xml-locations>
                <fileset dir="${tests.limewire.components.tests.xml}" includes="TEST-*.xml"/>
            </more-xml-locations>
        </do.tests2html>
    </target>
    
    <target name="test-components"
            description="Tests all components"
            depends="compile, lw-components.test-all">
         <mkdir dir="${tests.limewire.components.limewire.xml}"/>
         <do.tests2html component="limewire">
             <more-xml-locations>
                 <fileset dir="${tests.limewire.components.all.xml}" includes="TEST-*.xml"/>
             </more-xml-locations>
         </do.tests2html>
    </target>    
    
    <target name="test-one-lw"
            description="Tests a single test in limewire/tests.  (Useful for testing outside of the normal directory.)  Requires: -Dclass="
            depends="compile, lw-tests.test"/>
    
    <target name="test-pkg-lw"
            description="Tests a single package in limewire/tests.  (Useful for testing outside of the normal directory.)  Requires: -Dpackage="
            depends="compile, lw-tests.test-package"/>
    
    <target name="jar" depends="compile-src, lw-components.jar, lw-core-glue.jar">
        <!-- get the list of jars in a space separated list without dirnames -->
        <fileset dir="${limewire.lib.jars}" includes="**/*.jar" id="alljars"/>
        <pathconvert property="classpath" refid="alljars" pathsep=" ">
            <mapper type = "flatten" />
        </pathconvert>
        
        <mkdir dir="${limewire.home}/dist"/>        
       
        <!-- build limewire's main jar -->
        <!-- TODO: Mark Volkmann commented out the next line. -->
        <!--delete file="${limewire.home}/dist/LimeWire.jar"/-->
        <jar jarfile="${limewire.home}/dist/LimeWire.jar" compress="false">
            <fileset dir="${build.limewire.gui.classes}" includes="com/limegroup/**/*.class"/>
            <fileset dir="${build.limewire.core.classes}" includes="com/limegroup/**/*.class"/>
            <zipfileset src="${dist.limewire.components.all.jar}"/>  
            <zipfileset src="${dist.limewire.components.core-glue.jar}"/>
            <manifest>
                <attribute name="Main-Class" value="com.limegroup.gnutella.gui.Main" />
                <attribute name="Class-Path" value=". ${classpath}"/>
            </manifest>
        </jar>
    </target> 
    
    <!-- TODO: implement -->
    <target name="clean-dist"/>
        
    <target name="javadoc">
        <fail message="Use maven to generate javadocs."/>
    </target>
    
    <target name="clover2html"
            description="Converts clover's generated data into HTML reports."
            depends="initialize">
        <do.clover2html component="limewire">
            <moretestinfo>
                <testsources refid="limewire.components.sources.tests"/>
                <testsources dir="${limewire.components.tests.home}"/>
                <testresults dir="${tests.limewire.components.all.xml}" includes="TEST-*.xml"/>
                <testresults dir="${tests.limewire.components.tests.xml}" includes="TEST-*.xml"/>
                <testresults dir="${tests.limewire.components.core-glue.xml}" includes="TEST-*.xml"/>
             </moretestinfo>
        </do.clover2html>
    </target>
    
    <target name="with.clover"
            description="Instructs the build to use clover's instrumenting."
            depends="initialize">
        <mkdir dir="${limewire.components.limewire.home}/unused"/>
        <do.clover-setup component="limewire" defaultfileset="${limewire.components.limewire.home}/unused">
              <locations>    
                <fileset dir="${limewire.core.src}"/>
                <fileset dir="${limewire.gui.src}"/>
                <fileset dir="${limewire.components.tests.home}"/>
                <fileset refid="limewire.components.sources.all"/>
                <fileset dir="${limewire.components.core-glue.src}"/>
              </locations>
          </do.clover-setup>
      </target>

    <property name="translation.cutoff" value="60"/>

    <target name="lw-gettext-extract"
             description="Extracts message keys from the source code"
             depends="init.gettext">
        <gettext-extract keysFile="limewire.pot"
             poDirectory="lib/messagebundles" keywords="-kgetStringResource
             -kgetFormattedStringResource -ktrc -ktr -kmarktr -ktrn:1,2
             -ktrl -k">
          <fileset dir="components" includes="**/*.java"/>
          <fileset dir="core" includes="**/*.java"/>
        </gettext-extract>
    </target>

    <target name="lw-gettext-merge"
             description="Merge message keys with translations"
             depends="init.gettext">
        <gettext-merge keysFile="limewire.pot" poDirectory="lib/messagebundles"/>
    </target>

    <!-- generate two jars, one with almost complete translations, and a remaining one -->
    <target name="lw-bundle-messages"
            description="Rebuilds messages and bundles them"
            depends="init.gettext">

        <!-- clean up -->
        <delete dir="lib/messagebundles/org"/>
    
        <!-- generate default bundle for complete messages -->
        <gettext-generate-default targetBundle="org.limewire.i18n.Messages"
                                  outputDirectory="lib/messagebundles" 
                                  potfile="lib/messagebundles/limewire.pot"/>
    
        <!-- generate complete bundles -->
        <gettext-dist targetBundle="org.limewire.i18n.Messages"
                      poDirectory="lib/messagebundles"
                      outputDirectory="lib/messagebundles"
                      percentage="${translation.cutoff}"/>
    
        <!-- generate the empty en.po file without percentage  -->
        <gettext-dist targetBundle="org.limewire.i18n.Messages"
                      outputDirectory="lib/messagebundles">
            <fileset dir="lib/messagebundles" includes="en.po"/>
        </gettext-dist>
        
        <!-- jar them -->
        <jar destfile="lib/jars/messages.jar" 
             basedir="lib/messagebundles"
             includes="org/**"/>
            
        <!-- clean up -->
        <delete dir="lib/messagebundles/org"/>
            
        <!-- generate incomplete ones -->
        <gettext-dist targetBundle="org.limewire.i18n.Messages"
                      poDirectory="lib/messagebundles"
                      outputDirectory="lib/messagebundles"
                      percentage="${translation.cutoff}"
                      moreOrLess="less"/>
    
        <delete>
            <fileset dir="lib/messagebundles/org/limewire/i18n/" includes="**/Messages_en*"/>
        </delete>
    
        <!-- jar them -->
        <jar destfile="lib/jars/compile/messages.jar"
             basedir="lib/messagebundles"
             includes="org/**"/>
        
        <!-- clean up -->
        <delete dir="lib/messagebundles/org"/>
    </target>

    <!-- TODO: Need to finish getting this target to work!
    <target name="run" depends="jar" description="runs the GUI">
        <path id="classpath">
            <pathelement location="private-components/swingui/build/classes"/>
            <pathelement location="dist/LimeWire.jar"/>
            <fileset dir="lib"/>
        </path>
        <java classname="org.limewire.ui.swing.mainframe.AppFrame"
              classpathref="classpath"/>
    </target>
    -->

    <!-- mask imported targets -->
    <target name="test"/>
    <target name="test-package"/>
    <target name="compile-core"/>
    <target name="compile-core-src"/>
    <target name="compile-ui-src"/>
    <target name="compile-gui"/>

</project>
