? impl.patch
Index: .classpath
===================================================================
RCS file: /cvs/limewire/.classpath,v
retrieving revision 1.193
retrieving revision 1.193.4.1
diff -u -b -B -d -w -U 5 -r1.193 -r1.193.4.1
--- .classpath	6 Jan 2010 23:16:00 -0000	1.193
+++ .classpath	27 Jan 2010 19:59:54 -0000	1.193.4.1
@@ -129,11 +129,10 @@
 	<classpathentry kind="lib" path="lib/jars/smackx.jar" sourcepath="lib/sources/smack-src.jar"/>
 	<classpathentry kind="lib" path="lib/jars/tests/javax.servlet-5.1.12.jar"/>
 	<classpathentry kind="lib" path="lib/jars/tests/org.mortbay.jetty-5.1.12.jar"/>
 	<classpathentry kind="lib" path="lib/jars/jmdns.jar"/>
 	<classpathentry kind="lib" path="lib/jars/google-collect-1.0-rc2.jar" sourcepath="lib/sources/google-collect-src-1.0-rc2.zip"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
 	<classpathentry kind="lib" path="lib/jars/mime-util.jar" sourcepath="lib/sources/mime-util-src.jar"/>
 	<classpathentry kind="lib" path="lib/jars/jxlayer-4.0.jar" sourcepath="lib/sources/jxlayer-4.0-src.zip"/>
 	<classpathentry kind="lib" path="lib/jars/miglayout-3.7-swing.jar" sourcepath="lib/sources/miglayout-3.7-sources.jar"/>
 	<classpathentry kind="lib" path="lib/jars/swing-worker-1.2.jar" sourcepath="lib/sources/swing-worker-src-1.2.zip"/>
 	<classpathentry kind="lib" path="lib/jars/hsqldb-1.8.0.10.jar" sourcepath="lib/sources/hsqldb-1.8.0.10-src.zip"/>
@@ -163,7 +162,8 @@
 	<classpathentry kind="lib" path="lib/jars/osx/rococoa-core-20091217-1.jar"/>
 	<classpathentry kind="lib" path="lib/jars/fmj-20091008-20.jar" sourcepath="lib/sources/fmj-source.zip"/>
 	<classpathentry kind="lib" path="lib/jars/jna-3.2.4.jar" sourcepath="lib/sources/jna-3.2.4-sources.jar"/>
 	<classpathentry kind="lib" path="lib/jars/AnimatedTransitions-0.11.jar" sourcepath="lib/sources/AnimatedTransitions-0.11-src.zip"/>
 	<classpathentry kind="lib" path="lib/jars/TimingFramework-1.0.jar" sourcepath="lib/sources/TimingFramework-1.0-src.zip"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
Index: .settings/org.eclipse.jdt.core.prefs
===================================================================
RCS file: /cvs/limewire/.settings/org.eclipse.jdt.core.prefs,v
retrieving revision 1.15
retrieving revision 1.15.22.1
diff -u -b -B -d -w -U 5 -r1.15 -r1.15.22.1
--- .settings/org.eclipse.jdt.core.prefs	13 Oct 2009 15:47:11 -0000	1.15
+++ .settings/org.eclipse.jdt.core.prefs	27 Jan 2010 19:59:53 -0000	1.15.22.1
@@ -1,6 +1,6 @@
-#Tue Oct 06 16:35:04 EDT 2009
+#Tue Jan 19 18:40:15 GMT 2010
 eclipse.preferences.version=1
 instance/org.eclipse.core.net/org.eclipse.core.net.hasMigrated=true
 org.eclipse.jdt.core.builder.cleanOutputFolder=clean
 org.eclipse.jdt.core.builder.duplicateResourceTask=warning
 org.eclipse.jdt.core.builder.invalidClasspath=abort
@@ -123,15 +123,13 @@
 org.eclipse.jdt.core.formatter.brace_position_for_enum_constant=end_of_line
 org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration=end_of_line
 org.eclipse.jdt.core.formatter.brace_position_for_method_declaration=end_of_line
 org.eclipse.jdt.core.formatter.brace_position_for_switch=end_of_line
 org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.comment.clear_blank_lines=false
 org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
 org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=false
 org.eclipse.jdt.core.formatter.comment.format_block_comments=true
-org.eclipse.jdt.core.formatter.comment.format_comments=true
 org.eclipse.jdt.core.formatter.comment.format_header=false
 org.eclipse.jdt.core.formatter.comment.format_html=true
 org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=true
 org.eclipse.jdt.core.formatter.comment.format_line_comments=true
 org.eclipse.jdt.core.formatter.comment.format_source_code=true
@@ -153,11 +151,10 @@
 org.eclipse.jdt.core.formatter.indent_statements_compare_to_block=true
 org.eclipse.jdt.core.formatter.indent_statements_compare_to_body=true
 org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true
 org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=false
 org.eclipse.jdt.core.formatter.indentation.size=4
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation=insert
 org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert
 org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=do not insert
 org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement=do not insert
 org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
 org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=do not insert
Index: components/common/src/main/java/org/limewire/util/FileUtils.java
===================================================================
RCS file: /cvs/components/common/src/main/java/org/limewire/util/FileUtils.java,v
retrieving revision 1.52
retrieving revision 1.52.32.1
diff -u -b -B -d -w -U 5 -r1.52 -r1.52.32.1
--- components/common/src/main/java/org/limewire/util/FileUtils.java	2 Sep 2009 19:18:21 -0000	1.52
+++ components/common/src/main/java/org/limewire/util/FileUtils.java	27 Jan 2010 19:59:54 -0000	1.52.32.1
@@ -11,10 +11,11 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.OutputStream;
+import java.io.OutputStreamWriter;
 import java.math.BigInteger;
 import java.net.URL;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
 import java.security.MessageDigest;
@@ -47,21 +48,51 @@
      */
     private static final Map<File, Boolean> CAN_WRITE_CACHE = new ConcurrentHashMap<File, Boolean>();
 
     private static final CopyOnWriteArrayList<FileLocker> fileLockers = new CopyOnWriteArrayList<FileLocker>();
     
+    private interface WriterCallback {
+        void write(OutputStream out) throws IOException;
+    }
+
     /**
      * Writes an object to a backup file and then renames that file to a proper
      * file. Returns true if this succeeded, false otherwise.
      */
-    public static boolean writeWithBackupFile(Object toWrite, File backupFile, File properFile,
+    public static boolean writeWithBackupFile(final Object toWrite, File backupFile, File properFile, org.apache.commons.logging.Log log) {
+        return writeWithBackupFile(new WriterCallback() {
+            @Override
+            public void write(OutputStream out) throws IOException {
+                ObjectOutputStream objectOutputStream = new ObjectOutputStream(out);
+                objectOutputStream.writeObject(toWrite);
+                objectOutputStream.close();
+            }
+        }, backupFile, properFile, log);
+    }
+
+    public static boolean writeUtf8StringWithBackupFile(final String string, File backupFile, File properFile, org.apache.commons.logging.Log log) {
+        return writeWithBackupFile(new WriterCallback() {
+            @Override
+            public void write(OutputStream out) throws IOException {
+                OutputStreamWriter writer = new OutputStreamWriter(out, "UTF-8");
+                writer.write(string);
+                writer.close();
+            }
+        }, backupFile, properFile, log);
+    }
+    
+    /**
+     * Writes an object to a backup file and then renames that file to a proper
+     * file. Returns true if this succeeded, false otherwise.
+     */
+    private static boolean writeWithBackupFile(WriterCallback writerCallback, File backupFile, File properFile,
             org.apache.commons.logging.Log log) {
-        ObjectOutputStream out = null;
+        BufferedOutputStream out = null;
         
         try {
-            out = new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(backupFile)));
-            out.writeObject(toWrite);
+            out = new BufferedOutputStream(new FileOutputStream(backupFile));
+            writerCallback.write(out);
             out.flush();
             out.close();
             out = null;
             // If the files were the same, don't bother renaming.
             if(!properFile.equals(backupFile)) {
Index: components/common/src/main/java/org/limewire/util/URIUtils.java
===================================================================
RCS file: /cvs/components/common/src/main/java/org/limewire/util/URIUtils.java,v
retrieving revision 1.4
retrieving revision 1.4.22.1
diff -u -b -B -d -w -U 5 -r1.4 -r1.4.22.1
--- components/common/src/main/java/org/limewire/util/URIUtils.java	13 Oct 2009 14:58:46 -0000	1.4
+++ components/common/src/main/java/org/limewire/util/URIUtils.java	26 Jan 2010 20:09:59 -0000	1.4.22.1
@@ -53,10 +53,26 @@
         }
         return uri;
     }
 
     /**
+     * Creates a uri from an input string that is considered to be safe and
+     * not cause any {@link URISyntaxException}. If it does it will rethrow
+     * the exception as runtime exception.
+     * 
+     * @throws RuntimeException if <code>uriString</code> didn't represent
+     * as safe uri. 
+     */
+    public static URI toSafeUri(String uriString) {
+        try {
+            return toURI(uriString);
+        } catch (URISyntaxException use) {
+            throw new RuntimeException(use);
+        }
+    }
+
+    /**
      * Returns the port for the given URI. If no port can be found, it checks the scheme.
      * If the scheme is http port 80 is returned, if https 443.
      * <p>
      * -1 is returned if no port can be found.
      */
Index: components/common/src/main/resources/log4j.properties
===================================================================
RCS file: /cvs/components/common/src/main/resources/log4j.properties,v
retrieving revision 1.36
retrieving revision 1.36.14.1
diff -u -b -B -d -w -U 5 -r1.36 -r1.36.14.1
--- components/common/src/main/resources/log4j.properties	11 Dec 2009 00:54:54 -0000	1.36
+++ components/common/src/main/resources/log4j.properties	26 Jan 2010 21:03:48 -0000	1.36.14.1
@@ -15,11 +15,11 @@
 # the logs of a running application use the "socket" logger
 
 ########
 
 # Set the root loggers
-log4j.rootLogger=OFF, stdout
+log4j.rootLogger=OFF, socket
 
 
 ######
 #  The TextFile logger
 # if you want to enable logging to file in standard format:
@@ -105,10 +105,13 @@
 # will log all information read/written from/to the network using HttpClient
 
 #log4j.logger.com.limegroup.bittorrent=ALL
 #log4j.logger.com.limegroup.bittorrent.BTDownloaderImpl=ALL
 #log4j.logger.com.limegroup.bittorrent.BTTorrentFileDownloaderImpl=ALL
+#log4j.logger.com.limegroup.bittorrent.LimeWireTorrentManager=ALL
+#log4j.logger.com.limegroup.bittorrent.LimeWireTorrentSettings=ALL
+#log4j.logger.com.limegroup.bittorrent.TorrentDHTScheduler=ALL
 #log4j.logger.com.limegroup.bittorrent.TorrentUploadManager=ALL
 #log4j.logger.com.limegroup.gnutella=ALL
 #log4j.logger.com.limegroup.gnutella.AcceptorImpl=ALL
 #log4j.logger.com.limegroup.gnutella.AcceptorTest=ALL
 #log4j.logger.com.limegroup.gnutella.ActiveLimeWireCheck=ALL
@@ -133,10 +136,11 @@
 #log4j.logger.com.limegroup.gnutella.PushEndpointFactoryImpl=ALL
 #log4j.logger.com.limegroup.gnutella.PushManager=ALL
 #log4j.logger.com.limegroup.gnutella.QueryUnicaster=ALL
 #log4j.logger.com.limegroup.gnutella.QueryUnicasterTest=ALL
 #log4j.logger.com.limegroup.gnutella.RequestCache=ALL
+#log4j.logger.com.limegroup.gnutella.ResponseFactoryImpl=ALL
 #log4j.logger.com.limegroup.gnutella.SpamServicesImpl=ALL
 #log4j.logger.com.limegroup.gnutella.StandardMessageRouter=ALL
 #log4j.logger.com.limegroup.gnutella.UDPPingerImpl=ALL
 #log4j.logger.com.limegroup.gnutella.UDPService=ALL
 #log4j.logger.com.limegroup.gnutella.UPnPManager=ALL
@@ -221,14 +225,18 @@
 #log4j.logger.com.limegroup.gnutella.filters.LocalIPFilter=ALL
 #log4j.logger.com.limegroup.gnutella.filters.URNBlacklistManagerImpl=ALL
 #log4j.logger.com.limegroup.gnutella.filters.URNFilterImpl=ALL
 #log4j.logger.com.limegroup.gnutella.filters.response=ALL
 #log4j.logger.com.limegroup.gnutella.filters.response.CompoundResponseFilter=ALL
+#log4j.logger.com.limegroup.gnutella.filters.response.MutableGUIDFilter=ALL
 #log4j.logger.com.limegroup.gnutella.guess=ALL
 #log4j.logger.com.limegroup.gnutella.guess.OnDemandUnicaster=ALL
 #log4j.logger.com.limegroup.gnutella.handshaking=ALL
 #log4j.logger.com.limegroup.gnutella.handshaking.AsyncOutgoingHandshaker=ALL
+#log4j.logger.com.limegroup.gnutella.hashing=ALL
+#log4j.logger.com.limegroup.gnutella.hashing.AudioHashingUtils=ALL
+#log4j.logger.com.limegroup.gnutella.hashing.NonMetaDataHasher=ALL
 #log4j.logger.com.limegroup.gnutella.http=ALL
 #log4j.logger.com.limegroup.gnutella.http.DefaultHttpExecutor=ALL
 #log4j.logger.com.limegroup.gnutella.http.FeatureHeaderInterceptor=ALL
 #log4j.logger.com.limegroup.gnutella.http.ReadHeadersIOState=ALL
 #log4j.logger.com.limegroup.gnutella.library=ALL
@@ -242,17 +250,20 @@
 #log4j.logger.com.limegroup.gnutella.licenses.AbstractLicense=ALL
 #log4j.logger.com.limegroup.gnutella.licenses.CCConstants=ALL
 #log4j.logger.com.limegroup.gnutella.licenses.CCLicense=ALL
 #log4j.logger.com.limegroup.gnutella.licenses.LicenseCache=ALL
 #log4j.logger.com.limegroup.gnutella.licenses.LicenseFactoryImpl=ALL
-#log4j.logger.com.limegroup.gnutella.licenses.PublishedCCLicenseTest=ALL
 #log4j.logger.com.limegroup.gnutella.lws.server=ALL
 #log4j.logger.com.limegroup.gnutella.lws.server.CommandSender=ALL
 #log4j.logger.com.limegroup.gnutella.lws.server.LWSManagerImpl=ALL
 #log4j.logger.com.limegroup.gnutella.lws.server.LowLevelLWSDownloadTest=ALL
 #log4j.logger.com.limegroup.gnutella.lws.server.SimpleWebServer=ALL
 #log4j.logger.com.limegroup.gnutella.malware=ALL
+#log4j.logger.com.limegroup.gnutella.malware.NFOFile=ALL
+#log4j.logger.com.limegroup.gnutella.malware.VirusDefinitionDownloaderImpl=ALL
+#log4j.logger.com.limegroup.gnutella.malware.VirusDefinitionManagerImpl=ALL
+#log4j.logger.com.limegroup.gnutella.malware.VirusScannerImpl=ALL
 #log4j.logger.com.limegroup.gnutella.messagehandlers=ALL
 #log4j.logger.com.limegroup.gnutella.messagehandlers.AllNetworkPushRequestHandler=ALL
 #log4j.logger.com.limegroup.gnutella.messagehandlers.InspectionRequestHandler=ALL
 #log4j.logger.com.limegroup.gnutella.messagehandlers.OOBHandler=ALL
 #log4j.logger.com.limegroup.gnutella.messagehandlers.RestrictedResponder=ALL
@@ -281,16 +292,20 @@
 #log4j.logger.com.limegroup.gnutella.routing=ALL
 #log4j.logger.com.limegroup.gnutella.routing.QRPUpdater=ALL
 #log4j.logger.com.limegroup.gnutella.search=ALL
 #log4j.logger.com.limegroup.gnutella.search.QueryHandlerImpl=ALL
 #log4j.logger.com.limegroup.gnutella.search.SearchResultHandlerImpl=ALL
+log4j.logger.com.limegroup.gnutella.security=ALL
+#log4j.logger.com.limegroup.gnutella.security.CertificateProviderImpl=ALL
+#log4j.logger.com.limegroup.gnutella.security.CertifiedMessageVerifierImpl=ALL
 #log4j.logger.com.limegroup.gnutella.settings=ALL
 #log4j.logger.com.limegroup.gnutella.settings.SimppSettingsManager=ALL
-#log4j.logger.com.limegroup.gnutella.simpp=ALL
+log4j.logger.com.limegroup.gnutella.simpp=ALL
 #log4j.logger.com.limegroup.gnutella.simpp.SimppDataVerifier=ALL
 #log4j.logger.com.limegroup.gnutella.simpp.SimppManagerImpl=ALL
 #log4j.logger.com.limegroup.gnutella.simpp.SimppParser=ALL
+#log4j.logger.com.limegroup.gnutella.simpp.SimppSender=ALL
 #log4j.logger.com.limegroup.gnutella.spam=ALL
 #log4j.logger.com.limegroup.gnutella.spam.RatingTable=ALL
 #log4j.logger.com.limegroup.gnutella.spam.Tokenizer=ALL
 #log4j.logger.com.limegroup.gnutella.statistics=ALL
 #log4j.logger.com.limegroup.gnutella.statistics.OutOfBandStatisticsImpl=ALL
@@ -320,11 +335,10 @@
 #log4j.logger.com.limegroup.gnutella.xml.XMLParsingUtils=ALL
 #log4j.logger.org.limewire.bittorrent=ALL
 #log4j.logger.org.limewire.bittorrent.BTDataImpl=ALL
 #log4j.logger.org.limewire.collection=ALL
 #log4j.logger.org.limewire.collection.IntervalSetTest=ALL
-#log4j.logger.org.limewire.collection.RRProcessingQueue=ALL
 #log4j.logger.org.limewire.core.impl.browse=ALL
 #log4j.logger.org.limewire.core.impl.browse.FriendBrowseDownloadRUDPTest=ALL
 #log4j.logger.org.limewire.core.impl.download.listener=ALL
 #log4j.logger.org.limewire.core.impl.download.listener.TorrentDownloadListener=ALL
 #log4j.logger.org.limewire.core.impl.friend=ALL
@@ -345,31 +359,21 @@
 #log4j.logger.org.limewire.core.impl.mozilla=ALL
 #log4j.logger.org.limewire.core.impl.mozilla.LimeMozillaDownloadManagerListenerImpl=ALL
 #log4j.logger.org.limewire.core.impl.mozilla.LimeMozillaDownloadProgressListenerImpl=ALL
 #log4j.logger.org.limewire.core.impl.search.browse=ALL
 #log4j.logger.org.limewire.core.impl.search.browse.MultipleBrowseSearch=ALL
-#log4j.logger.org.limewire.facebook.service=ALL
-#log4j.logger.org.limewire.facebook.service.BuddyListResponseDeserializer=ALL
-#log4j.logger.org.limewire.facebook.service.ChatListener=ALL
-#log4j.logger.org.limewire.facebook.service.FacebookFriendConnection=ALL
-#log4j.logger.org.limewire.facebook.service.FacebookFriendService=ALL
-#log4j.logger.org.limewire.facebook.service.PresenceListener=ALL
-#log4j.logger.org.limewire.facebook.service.livemessage=ALL
-#log4j.logger.org.limewire.facebook.service.livemessage.AddressHandler=ALL
-#log4j.logger.org.limewire.facebook.service.livemessage.ConnectBackRequestHandler=ALL
-#log4j.logger.org.limewire.facebook.service.livemessage.DiscoInfoHandler=ALL
-#log4j.logger.org.limewire.facebook.service.livemessage.PresenceHandler=ALL
 #log4j.logger.org.limewire.friend.impl=ALL
 #log4j.logger.org.limewire.friend.impl.DefaultFriendAuthenticator=ALL
 #log4j.logger.org.limewire.friend.impl.MutableFriendManagerImpl=ALL
 #log4j.logger.org.limewire.friend.impl.address=ALL
 #log4j.logger.org.limewire.friend.impl.address.FriendAddressResolver=ALL
 #log4j.logger.org.limewire.friend.impl.feature=ALL
 #log4j.logger.org.limewire.friend.impl.feature.AddressDispatcher=ALL
 #log4j.logger.org.limewire.friend.impl.feature.AuthTokenDispatcher=ALL
 #log4j.logger.org.limewire.geocode=ALL
 #log4j.logger.org.limewire.geocode.CachedGeoLocationImpl=ALL
+#log4j.logger.org.limewire.geocode.GeocoderImpl=ALL
 #log4j.logger.org.limewire.http=ALL
 #log4j.logger.org.limewire.http.BasicHttpAcceptor=ALL
 #log4j.logger.org.limewire.http.auth=ALL
 #log4j.logger.org.limewire.http.auth.AuthenticationInterceptorImpl=ALL
 #log4j.logger.org.limewire.http.entity=ALL
@@ -382,12 +386,13 @@
 #log4j.logger.org.limewire.http.reactor.HttpChannel=ALL
 #log4j.logger.org.limewire.http.reactor.HttpIOSession=ALL
 #log4j.logger.org.limewire.inspection=ALL
 #log4j.logger.org.limewire.inspection.InspectorImpl=ALL
 #log4j.logger.org.limewire.libtorrent=ALL
+#log4j.logger.org.limewire.libtorrent.LibTorrentSession=ALL
 #log4j.logger.org.limewire.libtorrent.LibTorrentWrapper=ALL
-#log4j.logger.org.limewire.libtorrent.TorrentManagerImpl=ALL
+#log4j.logger.org.limewire.libtorrent.TorrentImpl=ALL
 #log4j.logger.org.limewire.lifecycle=ALL
 #log4j.logger.org.limewire.lifecycle.ServiceRegistryImpl=ALL
 #log4j.logger.org.limewire.lws.server=ALL
 #log4j.logger.org.limewire.lws.server.AbstractServer=ALL
 #log4j.logger.org.limewire.lws.server.LWSDispatcherSupport=ALL
@@ -452,13 +457,13 @@
 #log4j.logger.org.limewire.nio.NIODispatcher=ALL
 #log4j.logger.org.limewire.nio.NIOServerSocket=ALL
 #log4j.logger.org.limewire.nio.channel=ALL
 #log4j.logger.org.limewire.nio.channel.DelayedBufferWriter=ALL
 #log4j.logger.org.limewire.nio.ssl=ALL
+#log4j.logger.org.limewire.nio.ssl.AbstractSSLSocket=ALL
 #log4j.logger.org.limewire.nio.ssl.SSLEngineTest=ALL
 #log4j.logger.org.limewire.nio.ssl.SSLReadWriteChannel=ALL
-#log4j.logger.org.limewire.nio.ssl.TLSNIOSocket=ALL
 #log4j.logger.org.limewire.nio.statemachine=ALL
 #log4j.logger.org.limewire.nio.statemachine.BlockingStateMachine=ALL
 #log4j.logger.org.limewire.nio.statemachine.IOStateMachine=ALL
 #log4j.logger.org.limewire.nio.timeout=ALL
 #log4j.logger.org.limewire.nio.timeout.StalledUploadWatchdog=ALL
@@ -508,22 +513,17 @@
 #log4j.logger.org.limewire.ui.swing.browser.LimeMozillaInitializer=ALL
 #log4j.logger.org.limewire.ui.swing.components=ALL
 #log4j.logger.org.limewire.ui.swing.components.CustomHyperlinkUI=ALL
 #log4j.logger.org.limewire.ui.swing.dnd=ALL
 #log4j.logger.org.limewire.ui.swing.dnd.LocalFileListTransferHandler=ALL
-#log4j.logger.org.limewire.ui.swing.friend=ALL
-#log4j.logger.org.limewire.ui.swing.friend.FacebookShareEventNotifier=ALL
 #log4j.logger.org.limewire.ui.swing.friends.chat=ALL
 #log4j.logger.org.limewire.ui.swing.friends.chat.ChatHyperlinkListener=ALL
 #log4j.logger.org.limewire.ui.swing.friends.chat.ConversationPane=ALL
-#log4j.logger.org.limewire.ui.swing.friends.chat.MessageReceivedEvent=ALL
 #log4j.logger.org.limewire.ui.swing.friends.chat.MessageWriterImpl=ALL
 #log4j.logger.org.limewire.ui.swing.friends.chat.ResizingInputPanel=ALL
 #log4j.logger.org.limewire.ui.swing.friends.login=ALL
 #log4j.logger.org.limewire.ui.swing.friends.login.AutoLoginService=ALL
-#log4j.logger.org.limewire.ui.swing.friends.settings=ALL
-#log4j.logger.org.limewire.ui.swing.friends.settings.FacebookFriendAccountConfigurationImpl=ALL
 #log4j.logger.org.limewire.ui.swing.library.navigator=ALL
 #log4j.logger.org.limewire.ui.swing.library.navigator.LibraryNavTransferHandler=ALL
 #log4j.logger.org.limewire.ui.swing.mainframe=ALL
 #log4j.logger.org.limewire.ui.swing.mainframe.AppFrame=ALL
 #log4j.logger.org.limewire.ui.swing.mainframe.MainPanel=ALL
@@ -545,18 +545,18 @@
 #log4j.logger.org.limewire.ui.swing.shell.FileTypeAssociation=ALL
 #log4j.logger.org.limewire.ui.swing.util=ALL
 #log4j.logger.org.limewire.ui.swing.util.DownloadExceptionHandlerImpl=ALL
 #log4j.logger.org.limewire.ui.swing.util.GuiUtils=ALL
 #log4j.logger.org.limewire.ui.swing.util.LanguageUtils=ALL
+#log4j.logger.org.limewire.ui.swing.util.MacOSXUtils=ALL
 #log4j.logger.org.limewire.ui.swing.util.NativeLaunchUtils=ALL
 #log4j.logger.org.limewire.ui.swing.util.ResourceUtils=ALL
 #log4j.logger.org.limewire.util=ALL
 #log4j.logger.org.limewire.util.ConverterObjectInputStream=ALL
 #log4j.logger.org.limewire.util.FileUtils=ALL
 #log4j.logger.org.limewire.util.OSUtils=ALL
 #log4j.logger.org.limewire.util.SystemUtils=ALL
-#log4j.logger.org.limewire.util.URIUtils=ALL
 #log4j.logger.org.limewire.util.XMLUtils=ALL
 #log4j.logger.org.limewire.xmpp.client.impl=ALL
 #log4j.logger.org.limewire.xmpp.client.impl.DNSConnectionConfigurationFactory=ALL
 #log4j.logger.org.limewire.xmpp.client.impl.ReconnectionManager=ALL
 #log4j.logger.org.limewire.xmpp.client.impl.RosterListenerMock=ALL
Index: components/gnutella-core/src/main/java/com/limegroup/gnutella/LimeWireCoreModule.java
===================================================================
RCS file: /cvs/components/gnutella-core/src/main/java/com/limegroup/gnutella/LimeWireCoreModule.java,v
retrieving revision 1.178
retrieving revision 1.178.14.1
diff -u -b -B -d -w -U 5 -r1.178 -r1.178.14.1
--- components/gnutella-core/src/main/java/com/limegroup/gnutella/LimeWireCoreModule.java	9 Dec 2009 19:44:22 -0000	1.178
+++ components/gnutella-core/src/main/java/com/limegroup/gnutella/LimeWireCoreModule.java	26 Jan 2010 20:09:59 -0000	1.178.14.1
@@ -148,10 +148,11 @@
 import com.limegroup.gnutella.search.LimeWireSearchModule;
 import com.limegroup.gnutella.search.QueryDispatcher;
 import com.limegroup.gnutella.search.QueryDispatcherImpl;
 import com.limegroup.gnutella.search.QueryHandlerFactory;
 import com.limegroup.gnutella.search.QueryHandlerFactoryImpl;
+import com.limegroup.gnutella.security.LimeWireSecurityModule;
 import com.limegroup.gnutella.settings.LimeWireSettingsModule;
 import com.limegroup.gnutella.settings.SettingsBackedProxySettings;
 import com.limegroup.gnutella.settings.SettingsBackedSocketBindingSettings;
 import com.limegroup.gnutella.simpp.LimeWireSimppModule;
 import com.limegroup.gnutella.spam.LimeWireSpamModule;
@@ -213,10 +214,11 @@
         binder().install(new LimeWireIOModule());
         binder().install(new LimeWireMojitoModule());
         binder().install(new LimeWireSecurityCertificateModule());
         binder().install(new LimewireGeocodeModule());        
         binder().install(new LimeWirePromotionModule(PromotionBinderRequestorImpl.class, PromotionServicesImpl.class));        
+        binder().install(new LimeWireSecurityModule());
         binder().install(new LimeWireSimppModule());
         binder().install(new LimeWireBittorrentModule());
         binder().install(new LimeWireLibraryModule());
         binder().install(new LimeWireUploaderModule());
         binder().install(new LimeWireContentAuthModule());
Index: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/Certificate.java
===================================================================
RCS file: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/Certificate.java
diff -N components/gnutella-core/src/main/java/com/limegroup/gnutella/security/Certificate.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ components/gnutella-core/src/main/java/com/limegroup/gnutella/security/Certificate.java	22 Jan 2010 20:06:34 -0000	1.1.2.1
@@ -0,0 +1,19 @@
+package com.limegroup.gnutella.security;
+
+import java.security.PublicKey;
+
+/**
+ * Encapusulates a certificate, not necessarily valid.
+ */
+public interface Certificate {
+
+    byte[] getSignature();
+    
+    PublicKey getPublicKey();
+    
+    int getKeyVersion();
+    
+    byte[] getSignedPayload();
+    
+    String getCertificateString();
+}
Index: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateImpl.java
===================================================================
RCS file: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateImpl.java
diff -N components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateImpl.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateImpl.java	26 Jan 2010 20:09:59 -0000	1.1.2.2
@@ -0,0 +1,64 @@
+package com.limegroup.gnutella.security;
+
+import java.security.PublicKey;
+
+import org.limewire.util.Objects;
+
+/**
+ * Immutable, threadsafe, implements value equality.
+ */
+public class CertificateImpl implements Certificate {
+
+    private final byte[] signature;
+    private final byte[] signedPayload;
+    private final int keyVersion;
+    private final PublicKey publicKey;
+    private final String certificateString;
+
+    public CertificateImpl(byte[] signature, byte[] signedPayload, int keyVersion, PublicKey publicKey,
+            String certificateString) {
+        this.signature = signature;
+        this.signedPayload = signedPayload;
+        this.keyVersion = keyVersion;
+        this.publicKey = publicKey;
+        this.certificateString = Objects.nonNull(certificateString, "certificateString");
+    }
+    
+    @Override
+    public int getKeyVersion() {
+        return keyVersion;
+    }
+
+    @Override
+    public PublicKey getPublicKey() {
+        return publicKey;
+    }
+
+    @Override
+    public byte[] getSignature() {
+        return signature;
+    }
+
+    @Override
+    public byte[] getSignedPayload() {
+        return signedPayload;
+    }
+
+    @Override
+    public String getCertificateString() {
+        return certificateString;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (!(obj instanceof Certificate)) {
+            return false;
+        }
+        return certificateString.equals(((Certificate)obj).getCertificateString()); 
+    }
+    
+    @Override
+    public int hashCode() {
+        return certificateString.hashCode();
+    }
+}
Index: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateParser.java
===================================================================
RCS file: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateParser.java
diff -N components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateParser.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateParser.java	22 Jan 2010 20:06:34 -0000	1.1.2.1
@@ -0,0 +1,8 @@
+package com.limegroup.gnutella.security;
+
+import java.io.IOException;
+
+public interface CertificateParser {
+
+    Certificate parseCertificate(String data) throws IOException;
+}
Index: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateParserImpl.java
===================================================================
RCS file: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateParserImpl.java
diff -N components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateParserImpl.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateParserImpl.java	22 Jan 2010 20:06:34 -0000	1.1.2.1
@@ -0,0 +1,37 @@
+package com.limegroup.gnutella.security;
+
+import java.io.IOException;
+import java.security.PublicKey;
+
+import org.limewire.security.SignatureVerifier;
+import org.limewire.util.Base32;
+import org.limewire.util.StringUtils;
+
+public class CertificateParserImpl implements CertificateParser {
+
+    
+    public Certificate parseCertificate(String contents) throws IOException {
+        String[] parts = contents.split("\\|");
+        if (parts.length != 3) {
+            throw new IOException(parts.length + " invalid data format: " + contents);
+        }
+        byte[] signature = Base32.decode(parts[0]);
+        byte[] signedPayload = parsePayload(contents);
+        int keyVersion;
+        try { 
+            keyVersion = Integer.parseInt(parts[1]);
+        } catch (NumberFormatException nfe) {
+            throw new IOException("Could not parse key version");
+        }
+        PublicKey publicKey = SignatureVerifier.readKey(parts[2], "DSA");
+        return new CertificateImpl(signature, signedPayload, keyVersion, publicKey, contents);
+    }
+
+    byte[] parsePayload(String contents) throws IOException {
+        int pipe = contents.indexOf('|');
+        if (pipe < 0 || pipe == contents.length() - 1) {
+            throw new IOException("invalid contents: " + contents);
+        }
+        return StringUtils.toUTF8Bytes(contents.substring(pipe + 1));
+    }
+}
Index: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateProvider.java
===================================================================
RCS file: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateProvider.java
diff -N components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateProvider.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateProvider.java	26 Jan 2010 20:09:59 -0000	1.1.2.1
@@ -0,0 +1,9 @@
+package com.limegroup.gnutella.security;
+
+import org.limewire.inject.MutableProvider;
+import org.limewire.io.IpPort;
+
+public interface CertificateProvider extends MutableProvider<Certificate> {
+
+    Certificate getFromHttp(IpPort messageSource);
+}
Index: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateProviderImpl.java
===================================================================
RCS file: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateProviderImpl.java
diff -N components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateProviderImpl.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateProviderImpl.java	27 Jan 2010 19:59:54 -0000	1.1.2.3
@@ -0,0 +1,140 @@
+package com.limegroup.gnutella.security;
+
+import java.io.File;
+import java.io.IOException;
+import java.net.URI;
+import java.security.PublicKey;
+import java.security.SignatureException;
+
+import org.limewire.io.IpPort;
+import org.limewire.logging.Log;
+import org.limewire.logging.LogFactory;
+import org.limewire.util.FileUtils;
+
+import com.limegroup.gnutella.util.DataUtils;
+
+public class CertificateProviderImpl implements CertificateProvider {
+
+    private static final Log LOG = LogFactory.getLog(CertificateProviderImpl.class);
+    
+    private final FileCertificateReaderImpl fileCertificateReader;
+    private final HttpCertificateReaderImpl httpCertificateReader;
+    private final CertificateVerifier certificateVerifier;
+    
+    private volatile Certificate validCertificate;
+
+    private final File file;
+
+    private final URI uri;
+    
+    public CertificateProviderImpl(FileCertificateReaderImpl fileCertificateReader,
+            HttpCertificateReaderImpl httpCertificateReader, 
+            CertificateVerifier certificateVerifier,
+            File file, URI uri) {
+        this.fileCertificateReader = fileCertificateReader;
+        this.httpCertificateReader = httpCertificateReader;
+        this.certificateVerifier = certificateVerifier;
+        this.file = file;
+        this.uri = uri;
+    }
+    
+    public Certificate getFromFile() {
+        Certificate certificate = null; 
+        try {
+            certificate = fileCertificateReader.read(file);
+            validCertificate = certificateVerifier.verify(certificate);
+        } catch (IOException e) {
+            LOG.debugf(e, "certificate from invalid file: {0}", file);
+        } catch (SignatureException e) {
+            LOG.debugf(e, "certificate from file {0} invalid {1} ", file, certificate);
+        }
+        return validCertificate;
+    }
+
+    @Override
+    public void set(Certificate certificate) {
+        try { 
+            Certificate localCopy = validCertificate;
+            if (localCopy != null && !localCopy.equals(certificate) && certificate.getKeyVersion() > localCopy.getKeyVersion()) {
+                validCertificate = certificateVerifier.verify(certificate);
+                FileUtils.writeUtf8StringWithBackupFile(certificate.getCertificateString(), new File(file.getParentFile(), file.getName() + ".bak"), file, LOG);
+            }
+        } catch (SignatureException se) {
+            LOG.debugf(se, "certificate invalid {0} ", certificate);
+        }
+    }
+
+    @Override
+    public Certificate get() {
+        Certificate copy = validCertificate;
+        if (copy != null) {
+            return copy;
+        }
+        getFromFile();
+        copy = validCertificate;
+        if (copy != null) {
+            return copy;
+        }
+        getFromHttp(null);
+        copy = validCertificate;
+        if (copy != null) {
+            return copy;
+        }
+        copy = new NullCertificate();
+        validCertificate = copy;
+        return copy;
+    }
+
+    @Override
+    public Certificate getFromHttp(IpPort messageSource) {
+        Certificate certificate = null;
+        try {
+            certificate = httpCertificateReader.read(uri, messageSource);
+            set(certificateVerifier.verify(certificate));
+            return certificate;
+        } catch (IOException ie) {
+            LOG.debugf(ie, "certificate from invalid url: {0}", uri);
+        } catch (SignatureException e) {
+            LOG.debugf(e, "certificate from url {0} invalid {1} ", uri, certificate);
+        }
+        return validCertificate;
+    }
+
+    private static class NullCertificate implements Certificate {
+        @Override
+        public String getCertificateString() {
+            return null;
+        }
+        @Override
+        public int getKeyVersion() {
+            return -1;
+        }
+        @Override
+        public PublicKey getPublicKey() {
+            return new PublicKey() {
+                @Override
+                public String getFormat() {
+                    return "";
+                }
+                @Override
+                public byte[] getEncoded() {
+                    return DataUtils.EMPTY_BYTE_ARRAY;
+                }
+                @Override
+                public String getAlgorithm() {
+                    return "DSA";
+                }
+            };
+        }
+        @Override
+        public byte[] getSignature() {
+            return DataUtils.EMPTY_BYTE_ARRAY;
+        }
+        @Override
+        public byte[] getSignedPayload() {
+            return DataUtils.EMPTY_BYTE_ARRAY;
+        }
+    }
+    
+
+}
Index: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateVerifier.java
===================================================================
RCS file: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateVerifier.java
diff -N components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateVerifier.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateVerifier.java	22 Jan 2010 20:06:34 -0000	1.1.2.1
@@ -0,0 +1,9 @@
+package com.limegroup.gnutella.security;
+
+import java.security.SignatureException;
+
+public interface CertificateVerifier {
+
+    Certificate verify(Certificate certificate) throws SignatureException;
+    
+}
Index: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateVerifierImpl.java
===================================================================
RCS file: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateVerifierImpl.java
diff -N components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateVerifierImpl.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertificateVerifierImpl.java	22 Jan 2010 20:06:34 -0000	1.1.2.1
@@ -0,0 +1,20 @@
+package com.limegroup.gnutella.security;
+
+import java.security.SignatureException;
+
+import org.limewire.security.SignatureVerifier;
+
+public class CertificateVerifierImpl implements CertificateVerifier {
+
+    private static final String
+    
+    @Override
+    public Certificate verify(Certificate certificate) throws SignatureException {
+        SignatureVerifier signatureVerifier = new SignatureVerifier(certificate.getSignedPayload(), certificate.getSignature(), SignatureVerifier.readKey(PUBLIC_MASTER_KEY, "DSA"), "DSA");
+        if (!signatureVerifier.verifySignature()) {
+            throw new SignatureException("Invalid signature for: " + certificate);
+        }
+        return certificate;
+    }
+
+}
Index: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertifiedMessageVerifier.java
===================================================================
RCS file: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertifiedMessageVerifier.java
diff -N components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertifiedMessageVerifier.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertifiedMessageVerifier.java	26 Jan 2010 20:09:59 -0000	1.1.2.1
@@ -0,0 +1,17 @@
+package com.limegroup.gnutella.security;
+
+import java.security.SignatureException;
+
+import org.limewire.io.IpPort;
+
+public interface CertifiedMessageVerifier {
+
+    void verify(CertifiedMessage message, IpPort messageSource) throws SignatureException;
+    
+    public interface CertifiedMessage {
+        int getKeyVersion();
+        byte[] getSignature();
+        byte[] getSignedPayload();
+        Certificate getCertificate();
+    }
+}
Index: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertifiedMessageVerifierImpl.java
===================================================================
RCS file: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertifiedMessageVerifierImpl.java
diff -N components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertifiedMessageVerifierImpl.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ components/gnutella-core/src/main/java/com/limegroup/gnutella/security/CertifiedMessageVerifierImpl.java	26 Jan 2010 21:03:48 -0000	1.1.2.2
@@ -0,0 +1,57 @@
+package com.limegroup.gnutella.security;
+
+import java.security.SignatureException;
+
+import org.limewire.io.IpPort;
+import org.limewire.logging.Log;
+import org.limewire.logging.LogFactory;
+import org.limewire.security.SignatureVerifier;
+
+public class CertifiedMessageVerifierImpl implements CertifiedMessageVerifier {
+
+    private static final Log LOG = LogFactory.getLog(CertifiedMessageVerifierImpl.class);
+    
+    private final CertificateProvider certificateProvider;
+    private final CertificateVerifier certificateVerifier;
+
+    public CertifiedMessageVerifierImpl(CertificateProvider certificateProvider,
+            CertificateVerifier certificateVerifier) {
+        this.certificateProvider = certificateProvider;
+        this.certificateVerifier = certificateVerifier;
+    }
+    
+    @Override
+    public void verify(CertifiedMessage message, IpPort messageSource) throws SignatureException {
+        LOG.debugf("verifying message {0} from {1}", message, messageSource);
+        Certificate certificate = message.getCertificate();
+        if (certificate != null) {
+            LOG.debugf("message comes with new certificate: {0}", certificate);
+            certificate = certificateVerifier.verify(certificate);
+            LOG.debug("certificate verified successfully");
+            Certificate localCertificate = certificateProvider.get();
+            // update provider with new certificate after it verified and key version is greater
+            if (certificate.getKeyVersion() > localCertificate.getKeyVersion()) {
+                certificateProvider.set(certificate);
+            } else {
+                certificate = localCertificate;
+            }
+        } else {
+            LOG.debug("no certificate in message, fetch certificate from provider");
+            certificate = certificateProvider.get();
+        }
+        if (message.getKeyVersion() < certificate.getKeyVersion()) {
+            throw new SignatureException("message version less than certificate version");
+        } else if (message.getKeyVersion() > certificate.getKeyVersion()) {
+            LOG.debug("message key version greater than stored key version");
+            certificate = certificateProvider.getFromHttp(messageSource);
+            if (message.getKeyVersion() > certificate.getKeyVersion()) {
+                throw new SignatureException("key version greater than certificate version");
+            }
+        }
+        SignatureVerifier signatureVerifier = new SignatureVerifier(message.getSignedPayload(), message.getSignature(), certificate.getPublicKey(), "DSA");
+        if (!signatureVerifier.verifySignature()) {
+            throw new SignatureException("Invalid signature for: " + message);
+        }
+    }
+
+}
Index: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/FileCertificateReaderImpl.java
===================================================================
RCS file: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/FileCertificateReaderImpl.java
diff -N components/gnutella-core/src/main/java/com/limegroup/gnutella/security/FileCertificateReaderImpl.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ components/gnutella-core/src/main/java/com/limegroup/gnutella/security/FileCertificateReaderImpl.java	26 Jan 2010 20:09:59 -0000	1.1.2.2
@@ -0,0 +1,31 @@
+package com.limegroup.gnutella.security;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.limewire.util.FileUtils;
+import org.limewire.util.StringUtils;
+
+import com.google.inject.Inject;
+
+public class FileCertificateReaderImpl {
+        
+    private final CertificateParser certificateParser;
+
+    @Inject
+    public FileCertificateReaderImpl(CertificateParser certificateParser) {
+        this.certificateParser = certificateParser;
+    }
+    
+    public Certificate read(File file) throws IOException {
+        if (file.length() > 10000) {
+            throw new IOException("file too big, corrupted");
+        }
+        byte[] data = FileUtils.readFileFully(file);
+        if (data == null) {
+            throw new IOException("file could not be read");
+        }
+        return certificateParser.parseCertificate(StringUtils.toUTF8String(data));
+    }
+
+}
Index: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/HttpCertificateReaderImpl.java
===================================================================
RCS file: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/HttpCertificateReaderImpl.java
diff -N components/gnutella-core/src/main/java/com/limegroup/gnutella/security/HttpCertificateReaderImpl.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ components/gnutella-core/src/main/java/com/limegroup/gnutella/security/HttpCertificateReaderImpl.java	26 Jan 2010 20:09:59 -0000	1.1.2.2
@@ -0,0 +1,52 @@
+package com.limegroup.gnutella.security;
+
+import java.io.IOException;
+import java.net.URI;
+
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpResponse;
+import org.apache.http.HttpStatus;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.util.EntityUtils;
+import org.limewire.http.httpclient.LimeHttpClient;
+import org.limewire.io.IpPort;
+
+import com.google.inject.Inject;
+import com.google.inject.Provider;
+
+public class HttpCertificateReaderImpl {
+
+    private final Provider<LimeHttpClient> httpClient;
+    private final CertificateParser certificateParser;
+
+    @Inject
+    public HttpCertificateReaderImpl(Provider<LimeHttpClient> httpClient, 
+            CertificateParser certificateParser) {
+        this.httpClient = httpClient;
+        this.certificateParser = certificateParser;
+    }
+    
+    Certificate read(URI uri, IpPort messageSource) throws IOException {
+        HttpGet get = new HttpGet(uri);
+        if (messageSource != null) {
+            get.addHeader("X-Message-Source", messageSource.getAddress() + ":" + messageSource.getPort());
+        }
+        LimeHttpClient limeHttpClient = httpClient.get();
+        HttpResponse response = null;
+        try {
+            response = limeHttpClient.execute(get);
+            if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
+                throw new IOException("could not get content from: " + uri);
+            }
+            HttpEntity entity = response.getEntity();
+            if (entity == null) {
+                throw new IOException("no entity from: " + uri);
+            }
+            String contents = EntityUtils.toString(entity);
+            return certificateParser.parseCertificate(contents);
+        } finally {
+            limeHttpClient.releaseConnection(response);
+        }
+    }
+    
+}
Index: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/LimeWireSecurityModule.java
===================================================================
RCS file: components/gnutella-core/src/main/java/com/limegroup/gnutella/security/LimeWireSecurityModule.java
diff -N components/gnutella-core/src/main/java/com/limegroup/gnutella/security/LimeWireSecurityModule.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ components/gnutella-core/src/main/java/com/limegroup/gnutella/security/LimeWireSecurityModule.java	26 Jan 2010 20:09:59 -0000	1.1.2.1
@@ -0,0 +1,15 @@
+package com.limegroup.gnutella.security;
+
+import com.google.inject.AbstractModule;
+
+public class LimeWireSecurityModule extends AbstractModule {
+
+    @Override
+    protected void configure() {
+        bind(CertificateParser.class).to(CertificateParserImpl.class);
+        bind(CertificateVerifier.class).to(CertificateVerifierImpl.class);
+        bind(FileCertificateReaderImpl.class);
+        bind(HttpCertificateReaderImpl.class);
+    }
+
+}
Index: components/gnutella-core/src/main/java/com/limegroup/gnutella/simpp/LimeWireSimppModule.java
===================================================================
RCS file: /cvs/components/gnutella-core/src/main/java/com/limegroup/gnutella/simpp/LimeWireSimppModule.java,v
retrieving revision 1.3
retrieving revision 1.3.14.1
diff -u -b -B -d -w -U 5 -r1.3 -r1.3.14.1
--- components/gnutella-core/src/main/java/com/limegroup/gnutella/simpp/LimeWireSimppModule.java	17 Nov 2009 19:28:49 -0000	1.3
+++ components/gnutella-core/src/main/java/com/limegroup/gnutella/simpp/LimeWireSimppModule.java	26 Jan 2010 20:09:59 -0000	1.3.14.1
@@ -1,14 +1,38 @@
 package com.limegroup.gnutella.simpp;
 
+import java.io.File;
+
+import org.limewire.inject.LazySingleton;
+import org.limewire.util.CommonUtils;
+import org.limewire.util.URIUtils;
+
 import com.google.inject.AbstractModule;
+import com.google.inject.Provides;
+import com.limegroup.gnutella.security.CertificateProvider;
+import com.limegroup.gnutella.security.CertificateProviderImpl;
+import com.limegroup.gnutella.security.CertificateVerifier;
+import com.limegroup.gnutella.security.CertifiedMessageVerifier;
+import com.limegroup.gnutella.security.CertifiedMessageVerifierImpl;
+import com.limegroup.gnutella.security.FileCertificateReaderImpl;
+import com.limegroup.gnutella.security.HttpCertificateReaderImpl;
 
 public class LimeWireSimppModule extends AbstractModule {
     
     @Override
     protected void configure() {
         bind(SimppManager.class).to(SimppManagerImpl.class);
         bind(SimppDataProvider.class).to(SimppDataProviderImpl.class);
         bind(SimppSender.class);
     }
     
+    @Provides @LazySingleton @Simpp CertificateProvider simppCertificateProvider(FileCertificateReaderImpl fileCertificateReader, HttpCertificateReaderImpl httpCertificateReader,
+            CertificateVerifier certificateVerifier) {
+        return new CertificateProviderImpl(fileCertificateReader, httpCertificateReader, certificateVerifier, new File(CommonUtils.getUserSettingsDir(), "simpp.cert"), URIUtils.toSafeUri("http://localhost/"));
+    }
+    
+    @Provides @Simpp CertifiedMessageVerifier simppMessageVerifier(@Simpp CertificateProvider certificateProvider,
+            CertificateVerifier certificateVerifier) {
+        return new CertifiedMessageVerifierImpl(certificateProvider, certificateVerifier);
+    }
+    
 }
Index: components/gnutella-core/src/main/java/com/limegroup/gnutella/simpp/Simpp.java
===================================================================
RCS file: components/gnutella-core/src/main/java/com/limegroup/gnutella/simpp/Simpp.java
diff -N components/gnutella-core/src/main/java/com/limegroup/gnutella/simpp/Simpp.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ components/gnutella-core/src/main/java/com/limegroup/gnutella/simpp/Simpp.java	26 Jan 2010 20:09:59 -0000	1.1.2.1
@@ -0,0 +1,15 @@
+package com.limegroup.gnutella.simpp;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+import com.google.inject.BindingAnnotation;
+
+@BindingAnnotation
+@Target({ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD}) 
+@Retention(RetentionPolicy.RUNTIME)
+public @interface Simpp {
+
+}
Index: components/gnutella-core/src/main/java/com/limegroup/gnutella/simpp/SimppDataVerifier.java
===================================================================
RCS file: /cvs/components/gnutella-core/src/main/java/com/limegroup/gnutella/simpp/SimppDataVerifier.java,v
retrieving revision 1.12
retrieving revision 1.12.46.2
diff -u -b -B -d -w -U 5 -r1.12 -r1.12.46.2
--- components/gnutella-core/src/main/java/com/limegroup/gnutella/simpp/SimppDataVerifier.java	8 Jun 2009 19:57:58 -0000	1.12
+++ components/gnutella-core/src/main/java/com/limegroup/gnutella/simpp/SimppDataVerifier.java	26 Jan 2010 21:07:19 -0000	1.12.46.2
@@ -75,11 +75,11 @@
 
     
     ////////////////////////////helpers/////////////////////
 
     private PublicKey getPublicKey() {
-        String base32Enc = "GCBADNZQQIASYBQHFKDERTRYAQATBAQBD4BIDAIA7V7VHAI5OUJCSUW7JKOC53HE473BDN2SHTXUIAGDDY7YBNSREZUUKXKAEJI7WWJ5RVMPVP6F6W5DB5WLTNKWZV4BHOAB2NDP6JTGBN3LTFIKLJE7T7UAI6YQELBE7O5J277LPRQ37A5VPZ6GVCTBKDYE7OB7NU6FD3BQENKUCNNBNEJS6Z27HLRLMHLSV37SEIBRTHORJAA4OAQVACLWAUEPCURQXTFSSK4YFIXLQQF7AWA46UBIDAIA67Q2BBOWTM655S54VNODNOCXXF4ZJL537I5OVAXZK5GAWPIHQJTVCWKXR25NIWKP4ZYQOEEBQC2ESFTREPUEYKAWCO346CJSRTEKNYJ4CZ5IWVD4RUUOBI5ODYV3HJTVSFXKG7YL7IQTKYXR7NRHUAJEHPGKJ4N6VBIZBCNIQPP6CWXFT4DJFC3GL2AHWVJFMQAUYO76Z5ESUA4BQQAAFAMAO23AF7C247RPE4RGGMCU3XQTRVG3ZIKKQUVAS2BKNDBDB3W7L375GYP7ZWZL2RP3WAIBOHZ52G7KT46EAGBUG7DWQNZS4IWC2GDVU4PQ74Q64BJWMK2DZ6G7GYESYHUPBNDOB5PLI2WPF33NIAOXNYQXSEJLTSPUXBMY3RHAQY3TRG6EKQ6CNNZJ2NRVY3RZXLAV3QMVENJIQ";
+        String base32Enc
         
         //3. convert the base32 encoded String into the original bytes
         byte[] pubKeyBytes = Base32.decode(base32Enc);
         //4. Make a public key out of it
         PublicKey ret = null;
Index: components/gnutella-core/src/main/java/com/limegroup/gnutella/simpp/SimppManagerImpl.java
===================================================================
RCS file: /cvs/components/gnutella-core/src/main/java/com/limegroup/gnutella/simpp/SimppManagerImpl.java,v
retrieving revision 1.9
retrieving revision 1.9.22.1
diff -u -b -B -d -w -U 5 -r1.9 -r1.9.22.1
--- components/gnutella-core/src/main/java/com/limegroup/gnutella/simpp/SimppManagerImpl.java	5 Oct 2009 19:45:54 -0000	1.9
+++ components/gnutella-core/src/main/java/com/limegroup/gnutella/simpp/SimppManagerImpl.java	26 Jan 2010 20:09:59 -0000	1.9.22.1
@@ -1,10 +1,11 @@
 package com.limegroup.gnutella.simpp;
 
 import java.io.File;
 import java.io.IOException;
 import java.net.URISyntaxException;
+import java.security.SignatureException;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Random;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.ScheduledExecutorService;
@@ -35,10 +36,11 @@
 import com.limegroup.gnutella.ReplyHandler;
 import com.limegroup.gnutella.NetworkUpdateSanityChecker.RequestType;
 import com.limegroup.gnutella.http.HTTPHeaderName;
 import com.limegroup.gnutella.http.HttpClientListener;
 import com.limegroup.gnutella.http.HttpExecutor;
+import com.limegroup.gnutella.security.CertifiedMessageVerifier;
 import com.limegroup.gnutella.settings.SimppSettingsManager;
 import com.limegroup.gnutella.util.LimeWireUtils;
 
 /**
  * Used for managing signed messages published by LimeWire, and changing settings
@@ -84,23 +86,27 @@
             "http://simpp10.limewire.com/v2/simpp.def");
     private volatile int minMaxHttpRequestDelay = 1000 * 60;
     private volatile int maxMaxHttpRequestDelay = 1000 * 60 * 30;
     private volatile int silentPeriodForMaxHttpRequest = 1000 * 60 * 5;
     
+    private final CertifiedMessageVerifier simppMessageVerifier;
+    
     private static enum UpdateType {
         FROM_NETWORK, FROM_DISK, FROM_HTTP;
     }
     
     @Inject
     public SimppManagerImpl(Provider<NetworkUpdateSanityChecker> networkUpdateSanityChecker, Clock clock,
             ApplicationServices applicationServices, Provider<HttpExecutor> httpExecutor,
             @Named("backgroundExecutor") ScheduledExecutorService backgroundExecutor,
             @Named("defaults") Provider<HttpParams> defaultParams,
-            SimppDataProvider simppDataProvider) {
+            SimppDataProvider simppDataProvider,
+            @Simpp CertifiedMessageVerifier simppMessageVerifier) {
         this.networkUpdateSanityChecker = networkUpdateSanityChecker;
         this.clock = clock;
         this.applicationServices = applicationServices;
+        this.simppMessageVerifier = simppMessageVerifier;
         this.simppSettingsManagers = new CopyOnWriteArrayList<SimppSettingsManager>();
         this.httpExecutor = httpExecutor;
         this.backgroundExecutor = backgroundExecutor;
         this.defaultParams = defaultParams;
         this.simppDataProvider = simppDataProvider;
@@ -213,10 +219,16 @@
         } catch(IOException iox) {
             LOG.error("IOX parsing simpp data", iox);
             return;
         }
         
+        try { 
+            simppMessageVerifier.verify(parser.getCertifiedMessage(), handler);
+        } catch (SignatureException se) {
+            LOG.error("message did not verify", se);
+        }
+        
         if(LOG.isDebugEnabled()) {
             LOG.debug("Got data with version: " + parser.getVersion() + " from: " + updateType + ", current version is: " + _lastId);
         }
         
         switch(updateType) {
Index: components/gnutella-core/src/main/java/com/limegroup/gnutella/simpp/SimppParser.java
===================================================================
RCS file: /cvs/components/gnutella-core/src/main/java/com/limegroup/gnutella/simpp/SimppParser.java,v
retrieving revision 1.11
retrieving revision 1.11.176.2
diff -u -b -B -d -w -U 5 -r1.11 -r1.11.176.2
--- components/gnutella-core/src/main/java/com/limegroup/gnutella/simpp/SimppParser.java	10 Mar 2008 21:27:54 -0000	1.11
+++ components/gnutella-core/src/main/java/com/limegroup/gnutella/simpp/SimppParser.java	26 Jan 2010 20:09:59 -0000	1.11.176.2
@@ -3,29 +3,52 @@
 import java.io.IOException;
 import java.util.Locale;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.limewire.util.Base32;
+import org.limewire.util.StringUtils;
 import org.limewire.util.XMLUtils;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
 
+import com.limegroup.gnutella.security.Certificate;
+import com.limegroup.gnutella.security.CertificateParserImpl;
+import com.limegroup.gnutella.security.CertifiedMessageVerifier.CertifiedMessage;
 import com.limegroup.gnutella.xml.LimeXMLUtils;
 
 public class SimppParser {
     
     private static final Log LOG = LogFactory.getLog(SimppParser.class);
 
-    private static final String VERSION = "version";
+    public static final String VERSION = "version";
     
-    private static final String PROPS = "props";
+    public static final String PROPS = "props";
+    
+    public static final String KEY_VERSION = "keyversion";
+    
+    public static final String NEW_VERSION = "newversion";
+    
+    public static final String SIGNATURE = "signature";
+    
+    public static final String CERTIFICATE = "certificate";
 
     private int _version;
     private String _propsData;    
 
+    private int keyVersion;
+
+    private int newVersion;
+
+    private byte[] signature;
+    
+    private byte[] signedPayload;
+
+    private Certificate certificate;    
+
     //Format of dataBytes:
     //<xml for version related info with one tag containing all the props data>
     //TODO1: Change the way this is parsed as per the format described above. 
     public SimppParser(byte[] dataBytes) throws IOException {
         parseInfo(new String(dataBytes, "UTF-8"));
@@ -33,10 +56,14 @@
     
     public int getVersion() {
         return _version;
     }
 
+    public int getNewVersion() {
+        return newVersion;
+    }
+    
     public String getPropsData() {
         return _propsData;
     }
 
     ///////////////////////////private helpers////////////////////////
@@ -51,19 +78,56 @@
         for(int i= 0; i< len; i++) {
             Node node = children.item(i);
             String nodeName = node.getNodeName().toLowerCase(Locale.US).trim();
             String value = LimeXMLUtils.getText(node.getChildNodes());
             if(nodeName.equals(VERSION)) {
-                String ver = value;
+                _version = parseInteger(value, -1);
+            } else if (nodeName.equals(KEY_VERSION)) {
+                keyVersion = parseInteger(value, -1);
+            } else if (nodeName.equals(NEW_VERSION)) {
+                newVersion = parseInteger(value, -1);
+            } else if (nodeName.equals(SIGNATURE)) {
+                signature = Base32.decode(value);
+                signedPayload = StringUtils.toUTF8Bytes(stripSignature(xmlStr));
+            } else if (nodeName.equals(CERTIFICATE)) {
+                certificate = new CertificateParserImpl().parseCertificate(value);
+            } else if(nodeName.equals(PROPS)) {
+                _propsData = value;
+            }
+        }//end of for -- done all child nodes
+        // TODO fberger throw if necessary data is missing
+    }
+    
+    public CertifiedMessage getCertifiedMessage() {
+        return new CertifiedMessage() {
+            @Override
+            public byte[] getSignature() {
+                return signature;
+            }
+            @Override
+            public byte[] getSignedPayload() {
+                return signedPayload;
+            }
+            @Override
+            public int getKeyVersion() {
+                return keyVersion;
+            }
+            @Override
+            public Certificate getCertificate() {
+                return certificate;
+            }
+        };
+    }
+    
+    static int parseInteger(String integer, int defaultValue) {
                 try {
-                    _version = Integer.parseInt(ver);
+            return Integer.parseInt(integer);
                 } catch(NumberFormatException nfx) {
-                    LOG.error("Unable to parse version number: " + nfx);
-                    _version = -1;
-                }
+            LOG.error("Unable to parse number: " + integer, nfx);
+            return defaultValue;
             }
-            else if(nodeName.equals(PROPS)) {
-                _propsData = value;
             }
-        }//end of for -- done all child nodes
+    
+    static String stripSignature(String input) {
+        return input.replaceAll("<signature>[^<]*</signature>", "");
     }
 }
Index: components/gnutella-core/src/main/java/com/limegroup/gnutella/version/Update.java
===================================================================
RCS file: components/gnutella-core/src/main/java/com/limegroup/gnutella/version/Update.java
diff -N components/gnutella-core/src/main/java/com/limegroup/gnutella/version/Update.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ components/gnutella-core/src/main/java/com/limegroup/gnutella/version/Update.java	26 Jan 2010 20:09:59 -0000	1.1.2.1
@@ -0,0 +1,15 @@
+package com.limegroup.gnutella.version;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+import com.google.inject.BindingAnnotation;
+
+@BindingAnnotation
+@Target({ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD}) 
+@Retention(RetentionPolicy.RUNTIME)
+public @interface Update {
+
+}
Index: components/gnutella-core/src/test/java/com/limegroup/gnutella/simpp/SimppParserTest.java
===================================================================
RCS file: /cvs/components/gnutella-core/src/test/java/com/limegroup/gnutella/simpp/SimppParserTest.java,v
retrieving revision 1.1
retrieving revision 1.1.180.3
diff -u -b -B -d -w -U 5 -r1.1 -r1.1.180.3
--- components/gnutella-core/src/test/java/com/limegroup/gnutella/simpp/SimppParserTest.java	10 Mar 2008 21:27:54 -0000	1.1
+++ components/gnutella-core/src/test/java/com/limegroup/gnutella/simpp/SimppParserTest.java	26 Jan 2010 20:09:59 -0000	1.1.180.3
@@ -2,11 +2,16 @@
 
 import java.util.Locale;
 
 import junit.framework.Test;
 
+import org.limewire.util.Base32;
 import org.limewire.util.BaseTestCase;
+import org.limewire.util.StringUtils;
+
+import com.limegroup.gnutella.security.Certificate;
+import com.limegroup.gnutella.security.CertificateParserImpl;
 
 public class SimppParserTest extends BaseTestCase {
 
     public SimppParserTest(String name) {
         super(name);
@@ -30,6 +35,35 @@
             assertEquals("Failed for locale: " + locale, 334, parser.getVersion());
             assertEquals("Failed for locale: " + locale, "test", parser.getPropsData());
         }   
     }
 
+    /**
+     * Test to ensure that the simpp parser before the introduction of the new
+     * simpp key scheme gracefully ignores new and unknown elements in the simpp
+     * message. 
+     */
+    public void testOldParserIgnoresNewXMLElements() throws Exception {
+        String simppWithExtraElements = "<simpp><version>333</version><newVersion>1</newVersion><cert>AKSDFklsddd|15|lSDFKK34555</cert><props>propsdata</props></simpp>";
+        SimppParser parser = new SimppParser(StringUtils.toUTF8Bytes(simppWithExtraElements));
+        assertEquals(333, parser.getVersion());
+        assertEquals("propsdata", parser.getPropsData());
+    }
+    
+    public void testParsesNewXMLElements() throws Exception {
+        SimppParser parser = new SimppParser(StringUtils.toUTF8Bytes("<simpp><version>656</version><keyversion>1</keyversion><newversion>1</newversion><signature>GAWAEFBMGCFLMI5E5ACUNAQQ7AIWIP7JGBDUWCQCCR6MT6UIWBXIHJMZUGIT3IAKX2SKT55HEI</signature><certificate>GAWQEFIARSGMFXPFJZLZZMNQCYIT5VG66O7NWP6VAIKFJ6SZ2E2AJRHTD63UXONQT36SA5X7F7OA|1|certificate><props>propsdata</props></simpp>"));
+        assertEquals(656, parser.getVersion());
+        assertEquals(1, parser.getCertifiedMessage().getKeyVersion());
+        assertEquals(1, parser.getNewVersion());
+        assertEquals(Base32.decode("GAWAEFBMGCFLMI5E5ACUNAQQ7AIWIP7JGBDUWCQCCR6MT6UIWBXIHJMZUGIT3IAKX2SKT55HEI"), parser.getCertifiedMessage().getSignature());
+        assertEquals(StringUtils.toUTF8Bytes("<simpp><version>656</version><keyversion>1</keyversion><newversion>1</newversion><certificate>GAWQEFIARSGMFXPFJZLZZMNQCYIT5VG66O7NWP6VAIKFJ6SZ2E2AJRHTD63UXONQT36SA5X7F7OA|1|certificate><props>propsdata</props></simpp>"), parser.getCertifiedMessage().getSignedPayload());
+        Certificate certificate = new CertificateParserImpl().parseCertificate("GAWQEFIARSGMFXPFJZLZZMNQCYIT5VG66O7NWP6VAIKFJ6SZ2E2AJRHTD63UXONQT36SA5X7F7OA|1|
+        assertEquals(certificate, parser.getCertifiedMessage().getCertificate());
+        assertEquals("propsdata", parser.getPropsData());
+    }
+    
+    public void testStripsSignature() throws Exception {
+        assertEquals("hello", SimppParser.stripSignature("hello"));
+        assertEquals("", SimppParser.stripSignature("<signature>ABCDEFGHAIKLMNOPQRST1234569069</signature>"));
+        assertEquals("<simpp></simpp>", SimppParser.stripSignature("<simpp><signature>ABCDEFGHAIKLMNOPQRST1234569069</signature></simpp>"));
+    }
 }
Index: components/gnutella-core/src/test/java/com/limegroup/gnutella/version/UpdateCollectionTest.java
===================================================================
RCS file: /cvs/components/gnutella-core/src/test/java/com/limegroup/gnutella/version/UpdateCollectionTest.java,v
retrieving revision 1.18
retrieving revision 1.18.34.1
diff -u -b -B -d -w -U 5 -r1.18 -r1.18.34.1
--- components/gnutella-core/src/test/java/com/limegroup/gnutella/version/UpdateCollectionTest.java	21 Aug 2009 21:39:40 -0000	1.18
+++ components/gnutella-core/src/test/java/com/limegroup/gnutella/version/UpdateCollectionTest.java	14 Jan 2010 21:45:27 -0000	1.18.34.1
@@ -405,10 +405,31 @@
         assertEquals("WTG Quotes.", data.getUpdateText());
         assertEquals("\"name with spaces\" after quote", data.getUpdateCommand());
         
     }
     
+    /**
+     * Test to ensure that the update collection parser in use before the deployment
+     * of the new update key scheme gracefully ignores extra elements in the xml of
+     * the update message.
+     */
+    public void testUpdateCollectionParserIgnoresNewXMLElements() {
+       String xmlWithExtraElements = "<update id=\"16\" timestamp=\"1262110452904\">" +
+       "<newVersion>4545</newVersion>" +
+       "<msg from=\"4.16.7\" to=\"5.4.6\" for=\"5.4.6\" url=\"http://www.limewire.com/download/update?fc=4\" style=\"2\" os=\"mac,windows,linux,unix,other\" osv=\"10.5,*,*,*,*,*,*,*,*,*\">" + 
+       "<lang id='en' title='LimeWire 5.4'>" + 
+       "<![CDATA[<html>LimeWire 5.4 is here!<ul><li>Follow downloads with BitTorrent visualization</li><li>Built-in video player</li><li>Improved network connectivity</li></ul>Update Now</html>]]>" +
+       "</lang>" +
+       "</msg>" +
+       "<cert>4039485045|3|3049540584059</cert>" +
+       "</update>";
+       UpdateCollection updateCollection = updateCollectionFactory.createUpdateCollection(xmlWithExtraElements);
+       assertEquals(16, updateCollection.getId());
+       assertEquals(1262110452904L, updateCollection.getTimestamp());
+       assertEquals(1, updateCollection.getUpdateData().size());
+    }
+    
     
     private static void setOSName(String name) throws Exception {
         System.setProperty("os.name", name);
         PrivilegedAccessor.invokeMethod(OSUtils.class, "setOperatingSystems");
     }
