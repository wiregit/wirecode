
                           Out-of-Band-Replies
                           -------------------


This proposal describes a mechanism that will allow for Gnutella Query
Replies (aka Query Hits) to be delivered to interested parties
'out-of-band' - specifically, servents would deliver Query Replies
directly to the originator of the query as opposed to placing them on the
Gnutella net for eventual delivery to the originator.  Fundamentally,
servents would open a direct (TCP) connection to the Query originator and
dump the Query Replies in the originator's lap.

Some may raise the objection that this goes against the grain of the
Gnutella model - each Gnutella servent maintains a routing table (from
GUIDs to links) to specifically route traffic appropriately.  Some of this
maintenance would be unnecessary if all Query Replies are delivered
'out-of-band'.  Here are a few reasons why 'out-of-band' delivery of Query
Replies is a good idea:

  * QueryReply traffic is taking up a larger percentage of Gnutella
    traffic as the popularity of Gnutella grows.  Reducing some of this
    traffic would free up resources for other vital messaging necessary
    for a healthy Gnutella net.

  * Sending Query Replies 'out-of-band' is a purely optional enhancement.
    Clients that support 'out-of-band' delivery may choose how to send
    back any Replies (ie if the cost of an 'out-of-band' transaction is
    too high at the moment, then the servent can use the traditional
    mechanism).  This flexibility is a strength and is enforced by the use
    of the GGEP scheme to advertise 'out-of-band' support.

  * The 'out-of-band' scheme is fault-tolerant in the face of network
    topology changes.  If the originator loses vital links during the
    processing of a Query, Query Replies that are routed directly to the
    originator will still reach the desired destination.

  * Query Reply latency is potentially reduced as a set of Query Replies
    may experience no hop latency while routed on Gnutella net.

These are some of the reasons supporting 'out-of-band' Query Reply
delivery may be beneficial to the Gnutella net.  LimeWire plans to test
the 'out-of-band' scheme in future releases.

1. Advertising 'out-of-band' Delivery

Servents that support 'out-of-band' delivery should advertise their
support via GGEP.  A Query Request message can contain a GGEP block
between the two terminating null values.  The GGEP header value for
'out-of-band' delivery support is "OBR".  The GGEP block should peacefully
co-exist with other vendor extensions in the Query Request.  For more
information, please see :

http://groups.yahoo.com/group/the_gdf/files/Proposals/GGEP/GnutellaGenericExtensionProtocol.0.51.html

The GGEP extension block for 'out-of-band' should have a non-null value.
It should be the either 1) the address (host & port) of the non-firewalled 
query originator or 2) the address (host & port) of an Ultrapeer of the 
firewalled query originator.  2) is needed to allow 'out-of-band' to work
for firewalled hosts (more about this in section 2).  The format of this
value is a array of 6 bytes - the first 4 bytes should be the 4 bytes of
the IPv4 dotted address.  The last 2 bytes should be the port number in
network order.  These 6 bytes capture the essential information in a
compact manner.  The value should be COBs encoded as necessary. 

2. The 'out-of-band' Protocol

                    Case A: Non-firewalled Originator
                    ---------------------------------

A servent can deliver Query Replies to a originator 'out-of-band' assuming
the following two conditions:

  * The servent has files which fulfill the Query Request.
  * The Query Request has the 'out-of-band' GGEP Header in a non-null GGEP
    Extension block.

A servent can use its own logic to decide if the Query Replies should be 
sent back 'out-of-band' or according to the traditional Gnutella
mechanism.  If the 'out-of-band' mechanism is chosen, the following
protocol should be followed:

(In the following exchange, servent A is the non-firewalled originator of 
the Query that can accept messages 'out-of-band', whereas servent B is a 
'out-of-band' enabled servent with Query Replies to send to A)

Servent A (141.155.55.4:6346)
-----------------------------
QueryRequest for "Susheel" (GGEP Extension "OB:141.155.55.4:6346") via
Gnutella Broadcast

Servent B (file set includes "Susheel Is Awesome")
--------------------------------------------------
 - TCP Connect to 141.155.55.4:6346
 - TCP send to 141.155.55.4:6346 :
   "GNUTELLA TMP-CONNECT/0.6,OP:1\n\n"
 
Servent A
---------
 - TCP reply to incoming connection:
   "GNUTELLA OK\n\n"

Servent B
---------
 - TCP stream of Query Replies to 141.155.55.4:6346
 - close the TCP connection.

Servent A
---------
 - Accept Query Replies and process as necessary


Essentially, the standard Gnutella connect process has been modified to
allow for temporary connections.  Initially these temporary connections
are going to be used for 'out-of-band' delivery of Query Replies, but
future uses are available via the OP opcode mechanism.  A opcode of 1
signifies delivery of Query Replies.  In the future different opcodes may
be used, so acceptance of a temporary connection should be predicated on
acceptance of the opcode specified in the connect string.  As is usual,
any other reponse to a 'TMP-CONNECT' message other than "GNUTELLA OK\n\n"
indicates the servents unwillingness to accept the connection.


                    Case B: Firewalled Originator
                    -----------------------------

Suppose the originator is a firewalled host?  If the originator is a leaf
to 1 to n Ultrapeers, 'out-of-band' delivery can still be achieved.  Since
the n Ultrapeers will have routing tables set up that direct Query Replies
to the originator, the originator should send a Query Request with a GGEP
Extension value equivalent to 1 (to n) Ultrapeer address(es).  For
example:

(In the following exchange, servent A is the firewalled originator of 
the Query that cannot accept messages 'out-of-band', whereas servent B 
is a 'out-of-band' enabled servent with Query Replies to send to A.
Servents C1...Cn are Ultrapeers which all have A as a leaf node.)

Servent A (10.254.0.19:6346) with Ultrapeer C1 (141.155.67.8:6700)
------------------------------------------------------------------
QueryRequest for "Susheel" (GGEP Extension "OB:141.155.67.8:6700") via
Gnutella Broadcast

Servent B (file set includes "Susheel Is Awesome")
--------------------------------------------------
 - TCP Connect to 141.155.67.8:6700
 - TCP send to 141.155.67.8:6700 :
   "GNUTELLA TMP-CONNECT/0.6,OP:1\n\n"
 
Servent C1
----------
 - TCP reply to incoming connection:
   "GNUTELLA OK\n\n"

Servent B
---------
 - TCP stream of Query Replies to 141.155.67.8:6700
 - close the TCP connection.

Servent C1
----------
 - Accept Query Replies and route according to GUID routing tables

Servent A
---------
 - Receive Query Replies and process as usual


In the above example, Servent A sent the Query Request out with only 1
Ultrapeer's address.  In general, it would make sense to send different
Query Requests on each Ultrapeer link - namely, each Query Request sent on
a Ultrapeer link should have the address of that link's Ultrapeer.  This
models the current environment; if a leaf loses a Ultrapeer connection in
the midst of a Query, it only loses Query Replies it would have received
from that (lost) link.

3. Temporary Connections

The 'out-of-band' delivery mechanism expands the set of temporary
connections a client maintains.  Usually a temporary connection is
temporary only because a servent has not the resources necessary to
maintain that connection (ie a open connection slot).  The new
'out-of-band' temporary connection is temporary at the outset of the
connection, and there is some expected time to live (TTL) of the
connection.  Precisely, the connection should be open long enough to
receive the Query Replies.  Servent implementers should take care to
control this special set of temporary connections (which should ebb and
flow with Query Request traffic).