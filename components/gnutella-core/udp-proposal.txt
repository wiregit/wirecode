
                              Unicast Proposal
                              ----------------

This proposal details the protocol for sending Query Requests and
receiving Query Replies via unicast within the Gnutella Network.  This is
a departure from the current state, where all Gnutella query traffic is
via broadcast.
The reasons to introduce a unicast mechanism are manifold:

    * Gnutella's dependence on broadcast messages, while effective
    overall, can severely degrade network performance under certain
    conditions.
    For example, Query Request and Query Reply traffic can degrade overall
    network performance.  A mechanism that allows the burden of this
    traffic to be handled directly by the clients involved as opposed to
    a large segment of network would lead to a more efficient network in
    general.

    * Unicast Queries could take better advantage of a relatively new
    Gnutella feature - Ultrapeers.  As Ultrapeers begin to aggregate more
    and more leaf connections, targeted Queries with low TTLs can be more
    effective and less costly with respect to bandwidth usage than
    broadcast Queries.

    * This proposal will allow for more fine-grained search with respect
    to number of results received.  A static scheme with regards to
    connections (where a Query is sent to a fixed set of connections)
    often results in too many or too few Results.  This proposal allows
    for throttling depending upon the number of Results received.


1. Advertising Support via GGEP

  A) Advertising UDP support via Pongs
  Clients that support this protocol should advertise their support via
  GGEP headers located in Pongs.  The GGEP Header should be "UDP" and the
  GGEP Value should be the port the client is accepting UDP messages on.
  This will allow leaves to connect to participating Ultrapeers (which is
  a important component that allows firewalled hosts to participate in
  this scheme).  Moreover, it will allow for the extra handshaking step
  (detailed below) that allows a Ultrapeer to determine if a leaf can
  accept UDP connections.

  B) Validating your IP Address via GGEP
  Ultrapeers that send Query Requests out (detailed below) should add a
  GGEP extension to these messages.  The extension header should be "UDP"
  and the value should be the IP address and the port of the host (ie:
  'dotted-ip:port').  The extension value will be used by participating
  Ultrapeers to validate the sender of the message when recieved via UDP.


2. Server-Side Protocol



3. Client-Side Protocol

  A) Sending Queries
  When a UDP-enabled client (leaf) wants to send a Query Request, it
  should construct a Query Request as usual but with a GGEP extension
  header (as detailed in 1B).  It can then send the to n Ultrapeer 
  connections (n is implementation specific though nonzero).  It should
  then expect to receive queries via its UDP port and via the usual
  Gnutella mechanism (routed from Ultrapeer connections).  At some regular
  interval, the leaf may send the QueryRequest (with a new GUID) to
  another n Ultrapeers.  This interval is implementation specific, and the
  frequency of attempts should be dictated by the amount of Query Results
  received.
  The messaging method used by a leaf when sending Queries can be via UDP
  or TCP.  If a client is not firewalled, it can send Query Requests to
  its static connections via TCP and any cached unicast-capable Ultrapeers
  via UDP.  Firewalled hosts will only send Query Requests to its static
  Ultrapeer connections, and any unicast-capable Ultrapeers will serve as
  a proxy for the firewalled leaf (see 2).

  B) Recommendations for n
  In 3A we described that a leaf should have a value n that determines how
  many Ultrapeers are contacted per Query iteration.  This value should
  be as close to 1 as possible as the unicast scheme aims to take
  advantage of leaf aggregation.  Contacting one well connected Ultrapeer
  per iteration allows for the most control regarding the extent of your
  Query and will also result in the most bandwidth savings, though as n
  gets closer to 1 the latency of results will increase.  This latency is
  hard to perceive for the normal user, so setting n equal to 1 is advised.


5. Why UDP instead of TCP?



6. Preventing A UDP DOS attack



