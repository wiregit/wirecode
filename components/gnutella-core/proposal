-------------- BROWSE HOST PROTOCOL PROPOSAL --------------
At a high level, the protocol manages the exchange of binary Query
Replies through the HTTP protocol used for Uploads and Downloads.

Here are the details about the proposed standard:

* 'Browse Host' capable clients notify others of this feature via
GGEP. A new extension ID for Browse Host will be created and 'Browse
Host' capable clients will add a corresponding extension header.
There is no need for any extension data.
In the future, this may be extended to allow more depth in the
description of Browse Host capabilities (via a non-empty extension
data field), ie "text/html" or "binary QR".
For now, simply having a GGEP ext. ID (and no data) is sufficient
because different 'Browse Host' implementations are resolved via the
'Accept-Encoding' HTTP header flag (see below for more detail).

* A Browse Host request will be satisfied through an HTTP GET request.
The request will list encodings that are acceptable as a return value
(via the 'Accept-Encoding' request header field, RFC 1945, pg. 59).
The request lists these encodings with a empty-string valued GET.
For example, here is a sample Browse Host HTTP request:

Client (LimeWire)
-------------------------
GET / HTTP/1.0
Accept-Encoding:text/html;application/x-gnutella-packets

Server (BearShare)
-------------------------
HTTP/1.0 200 OK
Encoding:text/html

In this example above, LimeWire wants to browse a BearShare and it
accepts responses with encodings text/html and
application/x-gnutella-packets.
The BearShare supports text/html only. Therefore it returns a OK
indicating that responses will be sent back as html (the html will
immediately follow
the HTTP OK Response). Requesting the root "/" in the GET request is
translated into an Browse Host request.

The Server's IP and port can be retrieved via the standard route, ie a
Query Reply.

As can be seen, servers reply back with the encoding that will be
returned - the standard response encoding is
"application/x-gnutella-packets" .
This encoding implies that a stream of binary Query Replies describing
the shared files of the responding servent will be returned.

The "text/html" encoding is featured in BearShare clients. Bearshare
has had the browse host feature for some time now. For more
information about this encoding, please contact your friendly
BearShare representative.

Other encodings will be followed by different responses, as necessary.
If a servent cannot respond to any of the requested encodings, an HTTP
error message is returned.
For example:

Client (Old BearShare)
-------------------------
GET / HTTP/1.0
Accept-Encoding:text/html

Server (LimeWire)
-------------------------
HTTP/1.0 404 Not Found
Encoding: text/html

Old BearShare's only support text/html and LimeWire does not, so a 404
is returned (This is a example only) .

* Pushes are also supported. A Push is routed in the normal fashion
(a la Push Requests). The Push Request can technically have any
index, but using 0xFFFFFFFF is recommended.
The GIV message (sent from the server to the client requesting a
browse host) is the same. The Server should connect back to the
client regardless of the value of the index - what is most important
is the <servent-identifier> (the server's guid), which is used by the
client to match up the appropriate state.
For example, in response to the PushRequest, the following transaction
takes place:

Server
-------------------------
GIV 0xFFFFFFFF:<servent-identifier>/<lf><lf>

Client (noting the servent-identifier)
-------------------------
GET / HTTP/1.0
Accept-Encoding:text/html;application/x-gnutella-packets

Server (BearShare)
-------------------------
HTTP/1.0 200 OK
Encoding:text/html


This scheme has the following advantages:
1) It works seamlessly with all existing BearShares. This flexibility
also allows clients to create custom encoding standards if they wish,
while still allowing
for inter-vendor browsing.
2) No new message format is needed - pre-existing infrastructure is
special cased and the HTTP protocol is leveraged.
3) As a consequence of 2), Browse Host works through Pushes.