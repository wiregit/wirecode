package com.limegroup.gnutella.malware;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.atomic.AtomicBoolean;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.limewire.inject.LazySingleton;
import org.limewire.io.Expand;
import org.limewire.io.IOUtils;
import org.limewire.util.CommonUtils;
import org.limewire.util.FileUtils;
import org.limewire.util.OSUtils;
import org.limewire.util.SystemUtils;

import com.limegroup.gnutella.util.LimeWireUtils;

@LazySingleton
class FakeVirusScanner implements VirusScanner {

    private static final Log LOG = LogFactory.getLog(FakeVirusScanner.class);

    private volatile AtomicBoolean supported = null;
    private final AtomicBoolean initialized = new AtomicBoolean(false);

    @Override
    public boolean isInfected(File file) throws VirusScanException {
        initialize();
        try {
            Thread.sleep(5000);
        } catch (InterruptedException ignored) {
        }
        throw new VirusScanException();
    }

    @Override
    public boolean isInitialized() {
        return initialized.get();
    }

    @Override
    public boolean isSupported() {
        // TODO move logic to avg scanner
        if (supported == null) {
            synchronized (this) {
                if (supported == null) {
                    boolean windows = OSUtils.isWindows();
                    File avgZipFile = getAVGZipFile();
                    File avgVersionFile = getAVGVersionFile();
                    boolean avgZipFileExists = avgZipFile != null && avgZipFile.exists();
                    boolean avgVersionFileExists = avgVersionFile != null && avgVersionFile.exists();
                    
                    supported = new AtomicBoolean(
                            windows
                                    && (avgZipFileExists || avgVersionFileExists)
                                    && (LimeWireUtils.isPro() || LimeWireUtils.isBetaRelease() || LimeWireUtils
                                            .isTestingVersion()));
                }
            }
        }
        return supported.get();
    }

    private void initialize() {
        // TODO move logic to avg scanner
        if (!isInitialized() && isSupported()) {
            synchronized (this) {
                if (!isInitialized() && isSupported()) {
                    boolean avgInstalled = checkAndInstallAVG();
                    // TODO possible check/fix dll files on disk.
                    // TODO possibly check/fix registry entries.

                    // TODO might not need seperate initialezed and support
                    // variables and methods.
                    // Will need to reevaluate based on what mike needs.
                    initialized.set(avgInstalled);
                    supported.set(avgInstalled);
                }
            }
        }
    }

    /**
     * @return true if it appears that the avg dlls have been installed
     *         properly.
     */
    private boolean checkAndInstallAVG() {
        File avgInstallPath = getAVGInstallPath();
        // Check to see if the correct version of avg exists.
        File avgVersionFile = getAVGVersionFile();

        boolean avgInstalled = avgVersionFile.exists();
        if (!avgInstalled) {
            if (LOG.isDebugEnabled()) {
                LOG.debug("unzip avg to " + avgInstallPath);
            }
            FileUtils.deleteRecursive(avgInstallPath);

            File avgFile = getAVGZipFile();
            if (avgFile != null && avgFile.exists()) {
                InputStream in = null;
                try {
                    in = new BufferedInputStream(new FileInputStream(avgFile));
                    Expand.expandFile(in, avgInstallPath, true, null);
                    registerDLLs();
                    avgVersionFile.createNewFile();
                    avgInstalled = true;
                } catch (IOException e) {
                    // This causes errors if the zip file can't be expanded
                    // for
                    // whatever reason. Antivirus capabilities will not be
                    // available.
                } finally {
                    IOUtils.close(in);
                }
            }
        }

        return avgInstalled;
    }

    private File getAVGInstallPath() {
        File avgInstallPath = new File(CommonUtils.getUserSettingsDir(), "/avg");
        return avgInstallPath;
    }

    private File getAVGVersionFile() {
        File avgVersionFile = new File(getAVGInstallPath(), "avg-1.0");
        return avgVersionFile;
    }

    private void registerDLLs() {
        // TODO need to fill this in with the code that will register the dlls
        // properly.
    }

    private File getAVGZipFile() {
        File limewireDirectory = getLimeWireDirectory();
        if (limewireDirectory != null) {
            return new File(limewireDirectory, "lib/avg.zip");
        }
        return null;
    }

    private File getLimeWireDirectory() {
        String runningPath = SystemUtils.getRunningPath();
        if (runningPath != null && runningPath.contains("LimeWire.exe")) {
            return new File(runningPath).getParentFile();
        }
        return null;
    }
}
