package com.limegroup.gnutella.malware;

import java.io.File;

import org.limewire.util.CommonUtils;

import com.limegroup.gnutella.util.LimeWireUtils;

public class VirusUtils {

    private static class AVGTuple {
        File dir;
        int version;
    }

    static boolean antiVirusLibraryExists() {
        if(LimeWireUtils.isTestingVersion())
            return new File("c:\\files\\avg-test\\avgsdkcom.dll").exists();
        return new File("lib\\avgsdkcom.dll").exists();
    }

    static File getLicenseFile() {
        if(LimeWireUtils.isTestingVersion())
            return new File("c:\\files\\avg-test\\license");
        return new File("lib\\license");
    }

    static File getDatabaseDirectory() {
        if(LimeWireUtils.isTemporaryDirectoryInUse())
            return null;
        return new File(CommonUtils.getUserSettingsDir(), "avg\\database");
    }

    static File getLatestFullDefinitionsDirectory() {
        return getLatestDefinitions(false).dir;
    }

    static int getLatestFullDefinitionsVersion() {
        return getLatestDefinitions(false).version;
    }

    static File getLatestDefinitionsDirectory() {
        return getLatestDefinitions(true).dir;
    }

    public static int getLatestDefinitionsVersion() {
        return getLatestDefinitions(true).version;    
    }

    private static AVGTuple getLatestDefinitions(boolean includeIncremental) {
        File parent = getDatabaseDirectory();
        if(parent == null || !parent.exists() || !parent.isDirectory())
            return new AVGTuple();
        AVGTuple tuple = new AVGTuple();
        for(File dir : parent.listFiles()) {
            if(!dir.isDirectory())
                continue;
            String name = dir.getName();
            if(name.startsWith("avgsdk_vdb")) {
                name = name.replace("avgsdk_vdb", "");
            } else if(includeIncremental && name.startsWith("avgsdk_ivdb")) {
                name = name.replace("avgsdk_ivdb", "");
            } else {
                continue;
            }
            try {
                int version = Integer.parseInt(name);
                if(version > tuple.version) {
                    tuple.version = version;
                    tuple.dir = dir;
                }
            } catch(NumberFormatException skip) {
                // FIXME LOG
            }
        }
        return tuple;
    }
}
