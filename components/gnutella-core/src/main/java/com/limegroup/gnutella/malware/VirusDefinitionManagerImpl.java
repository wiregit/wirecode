package com.limegroup.gnutella.malware;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.concurrent.atomic.AtomicBoolean;

import org.limewire.collection.SortedList;
import org.limewire.core.api.malware.VirusUpdatesURL;
import org.limewire.io.Expand;
import org.limewire.io.IOUtils;

import com.google.inject.Inject;
import com.google.inject.Provider;

class VirusDefinitionManagerImpl implements VirusDefinitionManager {

    private final Provider<VirusDefinitionDownloader> downloader;
    private final Provider<String> updatesURL;
    private final AtomicBoolean checking;

    private final VirusDefinitionHandler fullUpdateHandler =
        new VirusDefinitionHandler() {
        @Override
        public void downloadSucceeded(File defs) {
            InputStream in = null;
            try {
                in = new BufferedInputStream(new FileInputStream(defs));
                Expand.expandFile(in, VirusUtils.getDatabaseDirectory(), true, null);
                // FIXME: clean up old definitions
            } catch(IOException e) {
                // FIXME: log
                e.printStackTrace();
            } finally {
                IOUtils.close(in);
            }
            checking.set(false);
        }

        @Override
        public void downloadFailed() {
            // FIXME: log
            System.err.println("Full update failed");
            checking.set(false);
        }
    };

    private class IncrementalUpdateHandler implements VirusDefinitionHandler {
        
        private final SortedList<NFOFile.Entry> incrementalEntries;

        public IncrementalUpdateHandler(SortedList<NFOFile.Entry> incrementalEntries) {
            this.incrementalEntries = incrementalEntries;
        }
        
        private void downloadNext() {
            if(incrementalEntries.size() > 0) {
                try {
                    NFOFile.Entry entry = incrementalEntries.remove(0);
                    download(entry);  
                } catch (URISyntaxException e) {
                    e.printStackTrace();
                    // FIXME fallback to full update
                }
            }
        }

        private void download(NFOFile.Entry entry) throws URISyntaxException {
            URI incrementalUpdate = new URI(updatesURL.get() + entry.getPath());
            downloader.get().fetch(incrementalUpdate, entry.getPath(), this);
        }

        @Override
        public void downloadSucceeded(File defs) {
            InputStream in = null;
            try {
                in = new BufferedInputStream(new FileInputStream(defs));
                Expand.expandFile(in, VirusUtils.getDatabaseDirectory(), true, null);
                // FIXME: call COM patch/reload
                downloadNext();
                // FIXME: clean up old definitions
            } catch(IOException e) {
                // FIXME: log
                // FIXME: fallback to full update
                e.printStackTrace();
            } finally {
                IOUtils.close(in);
            }
            checking.set(false);
        }

        @Override
        public void downloadFailed() {
            // FIXME: log
            System.err.println("incremental update failed");
            // FIXME: fallback to full update
            checking.set(false);
        }
    }
    
    private final VirusDefinitionHandler nfoHandler = 
        new VirusDefinitionHandler() {
            @Override
            public void downloadSucceeded(File nfo) {
                int currentVersion = VirusUtils.getLatestDefinitionsVersion();
                try {
                    NFOFile nfoFile = new NFOFile(nfo);
                    SortedList<NFOFile.Entry> incrementalEntries = nfoFile.getIncrementalEntries();
                    if(incrementalEntries.last().getVersion() > currentVersion) {
                        if(incrementalEntries.first().getVersion() > currentVersion) {
                            // do full upgrade
                            // FIXME actually can probably check for > currentVersion + 1                              
                            NFOFile.Entry latestFullEntry = nfoFile.getFullEntries().last();
                            try {
                                URI fullUpdate = new URI(updatesURL.get() + latestFullEntry.getPath());
                                downloader.get().fetch(fullUpdate, latestFullEntry.getPath(), fullUpdateHandler);
                            } catch (URISyntaxException e) {
                                e.printStackTrace();
                                checking.set(false);
                            }                            
                        } else {
                            // do incremental upgrade
                            SortedList<NFOFile.Entry> newIncrementalEntries  = new SortedList<NFOFile.Entry>(new NFOFile.EntryComparator());
                            for(NFOFile.Entry entry : incrementalEntries) {
                                if(entry.getVersion() > currentVersion) {
                                    newIncrementalEntries.add(entry);        
                                }
                            }
                            IncrementalUpdateHandler incrementalUpdateHandler = new IncrementalUpdateHandler(newIncrementalEntries);
                            incrementalUpdateHandler.downloadNext();
                        }
                    }
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                    checking.set(false);
                }
            }

            @Override
            public void downloadFailed() {
                // FIXME: log
                System.err.println("NFO download failed");
                checking.set(false);
            }
        };

    @Inject
    VirusDefinitionManagerImpl(Provider<VirusDefinitionDownloader> downloader,
                               @VirusUpdatesURL Provider<String> updatesURL) {
        this.downloader = downloader;
        this.updatesURL = updatesURL;
        checking = new AtomicBoolean(false);
    }

    @Override
    public void checkForDefinitions() {
        if(checking.getAndSet(true))
            return;
        // Download the NFO file
        try {
            URI nfo = new URI(updatesURL.get() + "current.nfo");
            downloader.get().fetch(nfo, "current.nfo", nfoHandler);
        } catch(URISyntaxException e) {
            // FIXME: log
            e.printStackTrace();
            checking.set(false);
        }
    }
    
    public boolean isChecking() {
        return checking.get();
    }
}
