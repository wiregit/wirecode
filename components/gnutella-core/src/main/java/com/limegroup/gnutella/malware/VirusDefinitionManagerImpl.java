package com.limegroup.gnutella.malware;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicBoolean;

import org.limewire.core.api.malware.VirusUpdatesURL;
import org.limewire.io.Expand;
import org.limewire.io.IOUtils;

import com.google.inject.Inject;
import com.google.inject.Provider;

class VirusDefinitionManagerImpl implements VirusDefinitionManager {

    private final Provider<VirusDefinitionDownloader> downloader;
    private final Provider<String> updatesURL;
    private final AtomicBoolean checking;

    private final VirusDefinitionHandler fullUpdateHandler =
        new VirusDefinitionHandler() {
        @Override
        public void downloadSucceeded(File defs) {
            InputStream in = null;
            try {
                in = new BufferedInputStream(new FileInputStream(defs));
                Expand.expandFile(in, VirusUtils.getDatabaseDirectory(), true, null);
                // FIXME: clean up old definitions
            } catch(IOException e) {
                // FIXME: log
                e.printStackTrace();
            } finally {
                IOUtils.close(in);
            }
            checking.set(false);
        }

        @Override
        public void downloadFailed() {
            // FIXME: log
            System.err.println("Full update failed");
            checking.set(false);
        }
    };

    private final VirusDefinitionHandler nfoHandler =
        new VirusDefinitionHandler() {
        @Override
        public void downloadSucceeded(File nfo) {
            // FIXME: find out the current version, decide whether to do a full
            // update, an incremental update, or neither
            if(VirusUtils.getLatestDefinitionsDirectory() != null) {
                System.err.println("Definitions already downloaded");
                checking.set(false);
                return;
            }
            try {
                String vdb = null;
                Scanner scanner = new Scanner(nfo);
                while(scanner.hasNextLine()) {
                    String line = scanner.nextLine();
                    String[] words = line.split(" ");
                    if(words.length == 2 && words[0].equals("VDB:")) {
                        vdb = words[1];
                        break;
                    }
                }
                scanner.close();
                if(vdb == null) {
                    // FIXME: log
                    System.err.println("Could not parse NFO file");
                    checking.set(false);
                    return;
                }
                URI fullUpdate = new URI(updatesURL.get() + vdb);
                downloader.get().fetch(fullUpdate, vdb, fullUpdateHandler);
            } catch(IOException e) {
                // FIXME: log
                e.printStackTrace();
                checking.set(false);
            } catch(URISyntaxException e) {
                // FIXME: log
                e.printStackTrace();
                checking.set(false);
            }
        }

        @Override
        public void downloadFailed() {
            // FIXME: log
            System.err.println("NFO download failed");
            checking.set(false);
        }
    };

    @Inject
    VirusDefinitionManagerImpl(Provider<VirusDefinitionDownloader> downloader,
                               @VirusUpdatesURL Provider<String> updatesURL) {
        this.downloader = downloader;
        this.updatesURL = updatesURL;
        checking = new AtomicBoolean(false);
    }

    @Override
    public void checkForDefinitions() {
        if(checking.getAndSet(true))
            return;
        // Download the NFO file
        try {
            URI nfo = new URI(updatesURL.get() + "current.nfo");
            downloader.get().fetch(nfo, "current.nfo", nfoHandler);
        } catch(URISyntaxException e) {
            // FIXME: log
            e.printStackTrace();
            checking.set(false);
        }
    }
}
