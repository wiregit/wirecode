<project name="lw-tests" default="compile" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

    <property name="limewire.home" location="${basedir}/.."/>    
    <property name="component" value="core-tests"/>

    <import file="${limewire.home}/components/common/ant-macros.xml"/>
    
    <property name="module" value="gnutella"/>
    
    <!-- THIS ENTIRE FILE WOULD GO AWAY IF CORE WERE A PROPER COMPONENT... :(  -->
    
    <target name="initialize" depends="ivy-load" unless="initialized.core-tests">
        <property name="initialized.core-tests"             value="true"/>
        <property name="limewire.core-tests.home"           location="${limewire.home}/tests"/>
        <property name="limewire.core-tests.src"  		    location="${limewire.core-tests.home}"/>
        <property name="build.limewire.core-tests.home"     location="${limewire.core-tests.home}/build"/>
        <property name="build.limewire.core-tests.tests"    location="${build.limewire.core-tests.home}/tests"/>
        <property name="build.limewire.core-tests.lib"      location="${build.limewire.core-tests.home}/lib"/>
        <property name="dist.limewire.core-tests.home"      location="${limewire.core-tests.home}/dist"/>
        <property name="tests.limewire.core-tests.home"     location="${limewire.core-tests.home}/testData"/>
        <property name="tests.limewire.core-tests.xml"      location="${tests.limewire.core-tests.home}/xml"/>
        <property name="tests.limewire.core-tests.html"     location="${tests.limewire.core-tests.home}/html"/>
        <property name="clover.limewire.core-tests.home"    location="${limewire.core-tests.home}/clover"/>
        <property name="clover.db.location"                 location="${limewire.core-tests.home}/clover/clover.db"/>
        <path id="build.limewire.core-tests.tests.classpath"> <!-- test compile classpath -->
            <fileset dir="${build.limewire.core-tests.lib}/test/" includes="**/*"/>
    	</path>        
        <path id="tests.limewire.core-tests.classpath"> <!-- test run classpath -->
            <pathelement location="${cloverjar}"/>        
    		<pathelement location="${build.limewire.core-tests.tests}"/>
    		<path refid="build.limewire.core-tests.tests.classpath"/>
        </path>
        
        <ivy:configure file="${limewire.home}/ivysettings.xml" override="true"/>
    </target>
    
	<target name="publish-dependencies" depends="initialize" unless="ivy.dependencies.published">
	    <property name="ivy.dependencies.published" value="true"/>
        <do.subant dir="${limewire.home}" includes="**/build.xml" root="${component}" target="publish" excluderoot="true"/>
	</target>    
    
    <target name="clean" depends="clean-tests, clean-dist">
        <delete dir="${build.limewire.core-tests.home}"/>
        <delete dir="${clover.limewire.core-tests.home}"/>
	</target>
    
    <target name="compile" depends="publish-dependencies">
        <mkdir dir="${build.limewire.core-tests.lib}/test"/>
        <ivy:resolve conf="test"
                     file="${limewire.core-tests.home}/ivy.xml"
                     log="quiet"/>
        <ivy:retrieve conf="test"
                      pattern="${build.limewire.core-tests.lib}/[conf]/[type]/[artifact]-[revision].[ext]"
                      sync="true"
                      symlink="true"
                      log="quiet"/>
        <!-- because ivy:retrieve has sync==true, if there are no dependencies, the dir will be removed.
             we don't want it removed, because then javac fails because the classpath is missing. -->
        <mkdir dir="${build.limewire.core-tests.lib}/test"/>
        
        <mkdir dir="${build.limewire.core-tests.tests}"/>
        <javac destdir="${build.limewire.core-tests.tests}" 
               debug="${compile.debug}"
               deprecation="${compile.deprecation}"
               optimize="${compile.optimize}"
               encoding="UTF-8" 
               source="${compile.source}" 
               target="${compile.target}" 
               srcdir="${limewire.core-tests.src}" 
               excludes="examples/**">
                <classpath refid="build.limewire.core-tests.tests.classpath"/>
        </javac>
    </target>
	
	<!-- there is no src code to compile, jar, publish, clean, or javadoc -->
	<target name="compile-src"/>    
	<target name="clean-src"/>    
    <target name="jar"/>    
    <target name="javadoc"/>	
	<target name="publish"/>
    
    <target name="clean-dist" depends="initialize">
        <delete dir="${dist.limewire.core-tests.home}"/>
    </target>
    
    <target name="with.clover" depends="initialize">
        <antcall target="clover-guard"/>
        <taskdef resource="cloverlib.xml"/>
        <mkdir dir="${clover.limewire.core-tests.home}"/>
        <clover-setup initstring="${clover.db.location}">
            <statementContext name="log" regexp="^LOG\..*"/>
            <statementContext name="iflog" regexp="^if *\(LOG\.is.*"/> 
            <methodContext name="main" regexp="public static void main\(String args\[\]\).*"/>
            <fileset dir="${limewire.core-tests.home}" includes="com/**/*.java"/>
        </clover-setup>
	</target>
    
    <target name="clover2html" depends="with.clover">
        <antcall target="clover-guard"/>
        <tstamp>
            <format property="clover.time" pattern="EEE, MMM d, yyyy hh:mm a"/>
        </tstamp>
        <clover-report initstring="${clover.db.location}">
            <current outfile="${clover.limewire.core-tests.home}/html"
            		 title="LimeWire - ${clover.time}">
                <format type="html" filter="log,iflog,assert,main"/>
            </current>
            <current outfile="${clover.limewire.core-tests.home}/coverage.xml"
                     title="LimeWire - ${clover.time}">
				<format type="xml" filter="log,iflog,assert,main"/>
            </current>
        </clover-report>
    </target>
    
	<target name="compile-tests" depends="compile"/>
	
	<target name="clean-tests" depends="initialize">
	    <delete dir="${build.limewire.core-tests.tests}"/>
	</target>
	
	<target name="test" depends="compile-tests, test-init">
		<run.run-tests-batchunit haltonerror="true"
						        haltonfailure="true"
						        unit="com/limegroup/${module}/${class}.class"/>
		<run.tests2html/>
	</target>
	
	<target name="test-package" depends="compile-tests, test-init">
		<run.run-tests-batchunit unit="com/limegroup/${module}/${package}/*Test.class"/>
		<run.tests2html/>
	</target>
	
	<target name="test-all" depends="compile-tests, test-init">
		<run.run-tests-batchunit unit="**/*Test.class"/>
		<run.tests2html/>
	</target>
	
	
	<target name="test-init">
	    <delete dir="${tests.limewire.core-tests.home}" />
	    <mkdir  dir="${tests.limewire.core-tests.home}" />
        <mkdir  dir="${tests.limewire.core-tests.html}" />
		<mkdir  dir="${tests.limewire.core-tests.xml}" />
	</target>
	
	<macrodef name="run.run-tests-batchunit">
	    <attribute name="unit"/>
	    <attribute name="haltOnFailure"     default="false"/>
	    <attribute name="haltOnError"	    default="false"/>
	    <attribute name="nativePathRefId"   default="limewire.library.path"/>
	    <sequential>
	        <junit printsummary="withOutAndErr"
	    	       haltonfailure="@{haltOnFailure}"
	    		   haltonerror="@{haltOnError}"
	    		   failureproperty="testsfailed"
	    	       showoutput="true"
	    	       fork="true"
	           	   forkmode="perTest"
	        	   timeout="1200000"
	    	>
	            <sysproperty key="java.library.path"      		 value="${@{nativePathRefId}}"/>
	    		<sysproperty key="junit.test.method"      		 value="${method}"/>
	    		<sysproperty key="junit.test.times"        		 value="${times}"/>
	    	    <sysproperty key="junit.test.hidetestname"		 value="${hidetestname}"/>
	            <sysproperty key="junit.test.ignoreErrorService" value="${ignoreErrorService}"/>
	            <jvmarg value="-Xmx512M"/>
	        	<jvmarg value="-ea"/>
	    		
	    		<classpath refid="tests.limewire.core-tests.classpath"/>
	    		
	    		<formatter type="xml"/>
	    		<formatter type="plain" usefile="${tests.writetofileonly}"/>
	    		
	    		<batchtest todir="${tests.limewire.core-tests.xml}">
	    			<fileset dir="${build.limewire.core-tests.tests}" includes="@{unit}"/>
	    		</batchtest>
			</junit>
		</sequential>
	</macrodef>
	
    <macrodef name="run.tests2html" description="Converts test XML output to HTML reports.">
        <sequential>
	        <junitreport todir="${tests.limewire.core-tests.xml}\..">
	        	<fileset dir="${tests.limewire.core-tests.xml}">
				    <include name="TEST-*.xml"/>
				</fileset>
	        	<report format="frames" todir="${tests.limewire.core-tests.html}"/>
	       </junitreport>
        </sequential>
    </macrodef>	

</project>
