<project name="Gnutella" default="build" basedir="." >

  <!-- set global properties for this basedir -->
  <property name="builddir"    value="build"/>
  <property name="messages"    value="com/limegroup/gnutella/messages" /> 
  <property name="util"        value="com/limegroup/gnutella/util" /> 
  <property name="lib"         value="../gui/lib/"/>
  <property name="corelib"     value="../core/lib/"/>
  <property name="GURL"        value="${lib}GURL.jar"/>
  <property name="collections" value="${lib}collections.jar"/>
  <property name="xerces"      value="${lib}xerces.jar"/>
  <property name="junit"       value="${lib}junit.jar"/>
  <property name="jl020"       value="${lib}jl020.jar"/>
  <property name="jl011"       value="${lib}jl011.jar"/>
  <property name="playerlib"   value="${jl011}"/>
  <property name="mp3sp"       value="${lib}mp3sp14.jar"/>
  <property name="logicrypto"  value="${corelib}logicrypto.jar"/>
  <property name="ui"          value="${lib}ui.jar"/>
  <property name="mrj"         value="${lib}MRJToolkitStubs.jar"/>
  <property name="osx"         value="${lib}MRJ141Stubs.jar"/>
  <property name="mac"         value="${lib}MacStubs.jar"/>
  <property name="quicktime"   value="${lib}QTJava.zip"/>
  <property name="coredir"     value="../core/"/>
  <property name="guidir"      value="../gui/"/>
  <property name="settings"    value="${coredir}com/limegroup/gnutella/settings/"/>
  <property name="tests"       value="com/limegroup/gnutella/tests/"/>
  <property name="reports"     value="reports"/>
  <property name="datadir"     value="${basedir}"/>

  <!-- constants -->
  <property name="DEBUG" value="yes" />
  <property name="OPTIMIZE" value="no" />
  <property name="DEPRECATION" value="yes" />
  <property name="NOWARN" value="yes"/>

  <!-- default classpath for javac.  it is set as the user's CLASSPATH
       environment with the jar files necessary for compilation appended. -->
  <path id="default.classpath" >
    <pathelement location="${builddir}" />
    <pathelement location="${coredir}" />
    <pathelement location="${collections}" />
    <pathelement location="${xerces}" />
    <pathelement location="${playerlib}" />
    <pathelement location="${mp3sp}" />
	<pathelement location="${ui}" />
    <pathelement location="${mrj}" />
    <pathelement location="${osx}" />
	<pathelement location="${mac}" />
	<pathelement location="${GURL}" />
	<pathelement location="${quicktime}"/>
	<pathelement location="${logicrypto}"/>
	<pathelement location="${datadir}"/>
  </path>

  <!-- Initialization stuff -->
  <target name="init" >
    <!-- we dont do much here right now, but may do later -->
    <tstamp/>
  </target>

  <!-- CLEAN -->
  <target name="clean">
	<delete dir="${builddir}"/>
    <ant target="clean reports"/>
  </target>
  
  <!-- clean just the reports -->
  <target name="clean reports">
    <delete dir="${reports}"/>
  </target>
  
  <!-- clean testData dir -->
  <target name="clean testData">
    <delete dir="testData"/>
  </target>
  
  <!-- PREPARE -->
  <target name="prepare">
    <mkdir dir="${builddir}"/>
    <mkdir dir="${reports}"/>
    <mkdir dir="${reports}/html"/>
  </target>

 <!-- builds all files, including tests, in the project to the specified directory-->
 <target name="build" depends="prepare">
   <javac debug="on" optimize="off" deprecation="off"
	      srcdir="${coredir}:${guidir}:${basedir}"
	      destdir="${builddir}" nowarn="${NOWARN}"
		  excludes="macosx/**, ${tests}**, ${settings}, **.gif,**.class,**.bat,**.sh,**.jar, **.xml">

     <classpath refid="default.classpath" />
   </javac>
 </target>
 
 <!-- RUNS ALL TESTS. -->
 <!-- Output goes to both XML file and stdout. -->
 <!-- To run, type 'ant "test all"' (without the single quotes). -->
 <!-- Formats the XML output to html. -->
 <target name="test all">
    <antcall target="batchunit">
        <param name="unit" value="**/*Test.class"/>
        <param name="haltonfailure" value="no"/>
        <param name="haltonerror" value="no"/>
    </antcall>
    <antcall target="html"/>
    <antcall target="clean testData"/>
 </target>
 
  <!-- Runs a specific package - passed by 'package' -->
  <!-- Output goes to both XML file and stdout. -->
  <!-- To run, type 'ant -D"package=<mypackage>" "test package"' (without the single quotes). -->
  <!-- Formats the XML output to html. -->
 <target name="test package" if="package">
    <antcall target="batchunit">
        <param name="unit" value="com/limegroup/gnutella/${package}/*Test.class"/>
        <param name="haltonfailure" value="no"/>
        <param name="haltonerror" value="no"/>
    </antcall>
    <antcall target="html"/>
    <antcall target="clean testData"/>
 </target>
 
 <!-- Runs a specific class, passing the output to the shell & XML file-->
 <!-- class name specified by class passed by 'class' -->
 <!-- For example, to run UltrapeerRoutingTest, you would type: -->
 <!-- ant -D"class=UltrapeerRoutingTest" test -->
 <!-- To test, say, DownloadTest, you would type: -->
 <!-- ant -D"class=downloader/DownloadTest" test -->
 <target name="test" if="class">
    <antcall target="batchunit">
        <param name="unit" value="com/limegroup/gnutella/${class}.class"/>
        <param name="haltonfailure" value="yes"/>
        <param name="haltonerror" value="yes"/>
    </antcall>
    <antcall target="html"/>
    <antcall target="clean testData"/>
 </target>
 
  <!-- Runs a specific class, passing the output to the shell & XML file-->
 <!-- class name specified by class passed by 'class' -->
 <!-- For example, to run UltrapeerRoutingTest, you would type: -->
 <!-- ant -D"class=UltrapeerRoutingTest" test -->
 <!-- To test, say, DownloadTest, you would type: -->
 <!-- ant -D"class=downloader/DownloadTest" test -->
 <target name="testnofail" if="class">
    <antcall target="batchunit">
        <param name="unit" value="com/limegroup/gnutella/${class}.class"/>
        <param name="haltonfailure" value="no"/>
        <param name="haltonerror" value="no"/>
    </antcall>
    <antcall target="html"/>
    <antcall target="clean testData"/>
 </target>  

 
 <!-- To be used internally by 'test all', 'test package' & 'test' -->
 <target name="batchunit" if="unit" depends="clean testData, prepare, build"> 
        <junit printsummary="withOutAndErr"
               haltonfailure="${haltonfailure}"
               haltonerror="${haltonerror}"
               failureproperty="testfailed"
               showoutput="true"
               fork="on"
        >
        
            <classpath refid="default.classpath" />
            
            <formatter type="xml" />
            <formatter type="plain" useFile="false"/>
            
            <batchtest fork="on"
                       todir="${reports}" >
                <fileset dir="${builddir}" 
                         includes="${unit}" />
            </batchtest>    
        </junit>
 </target>
 
  <!-- Converts the XML output to pretty HTML reports -->
 <target name="html">
	<junitreport todir="${reports}">
	    <fileset dir="${reports}">
	        <include name="TEST-*.xml"/>
	    </fileset>	    
	    <report format="frames" todir="${reports}/html"/>
	</junitreport>
 </target>
 
 <!-- Runs all backend LimeWire servers to test against on ports starting -->
 <!-- with 6300. -->
 <target name="run all servers">
    <property name="serversRunning" value="true"/>
    <!-- Start LimeWire servers on specific ports for the tests -->
    <parallel>
      <antcall target="run server"/>
      <sequential>
        <!-- The LimeWire servers get confused if we run them both at once -->
        <sleep seconds="10"/>
	    <antcall target="run reject server"/>
      </sequential>
    </parallel> 
 </target>

 <!-- Runs a specific class test while also running a LimeWire -->
 <!-- server on port 6300 that is a standardized Ultrapeer,-->
 <!-- running on localhost only, that accepts one connection at a time. -->
 <target name="test6300" if="class" depends="prepare, build">
    <parallel>

	  <antcall target="run server"/>

      <sequential>
        <sleep seconds="20"/>
        <junit printsummary="withOutAndErr" 
	           haltonfailure="yes"
	           showoutput="true"
		       fork="on" >
	       <classpath refid="default.classpath"/>
           <formatter type="plain" useFile="false"/>
	       <test name="com.limegroup.gnutella.${class}"/>    
	     </junit>
      </sequential>
    </parallel>
 </target>  

 <!-- The same as test6300, except that this runs another LimeWire-->
 <!-- server on port 6301 that rejects all connection attempts. -->
 <target name="test6301" if="class" depends="prepare, build">
    <parallel>

	  <antcall target="run all servers"/>

      <sequential>
        <sleep seconds="20"/>
        <junit printsummary="withOutAndErr" 
	           haltonfailure="yes"
	           showoutput="true"
		       fork="on">
           <sysproperty key="servers" value="6301"/>
	       <classpath refid="default.classpath"/>
           <formatter type="plain" useFile="false"/>
	       <test name="com.limegroup.gnutella.${class}"/>
	     </junit>
      </sequential>
    </parallel>
  </target>  
  
  <!-- runs a backend server on 6300 for testing -->
  <target name="run server">
	<java classname="com.limegroup.gnutella.Backend"
		  failonerror="true"
	      fork="true"
	>
     <classpath refid="default.classpath" />
      <arg value="100000"/>
    </java>  
  </target>

  <!-- runs a backend server on 6301 for testing -->
  <target name="run reject server">
	<java classname="com.limegroup.gnutella.Backend"
		  failonerror="true"
	      fork="true"
	>
     <classpath refid="default.classpath" />
      <arg value="80000"/>
      <arg value="reject"/>
    </java>  
  </target>
</project>


