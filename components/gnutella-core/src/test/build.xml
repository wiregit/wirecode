<project name="Gnutella" default="build" basedir="." >

  <!-- set global properties for this basedir -->
  <property name="builddir"        value="build"/>
  <property name="guidir"          value="../gui"/>
  <property name="coredir"         value="../core"/>
  <property name="messages"        value="com/limegroup/gnutella/messages" /> 
  <property name="util"            value="com/limegroup/gnutella/util" /> 
  <property name="lib"             value="${guidir}/lib/"/>
  <property name="corelib"         value="${coredir}/lib/"/>
  <property name="GURL"            value="${lib}GURL.jar"/>
  <property name="collections"     value="${lib}collections.jar"/>
  <property name="xerces"          value="${lib}xerces.jar"/>
  <property name="junit"           value="${lib}junit.jar"/>
  <property name="jl020"           value="${lib}jl020.jar"/>
  <property name="jl011"           value="${lib}jl011.jar"/>
  <property name="playerlib"       value="${jl011}"/>
  <property name="mp3sp"           value="${lib}mp3sp14.jar"/>
  <property name="logicrypto"      value="${corelib}logicrypto.jar"/>
  <property name="ui"              value="${lib}ui.jar"/>
  <property name="mrj"             value="${lib}MRJToolkitStubs.jar"/>
  <property name="osx"             value="${lib}MRJ141Stubs.jar"/>
  <property name="mac"             value="${lib}MacStubs.jar"/>
  <property name="quicktime"       value="${lib}QTJava.zip"/>
  <property name="settings"        value="${coredir}com/limegroup/gnutella/settings/"/>
  <property name="tests"           value="com/limegroup/gnutella/tests/"/>
  <property name="reports"         value="reports"/>
  <property name="datadir"         value="${basedir}"/>
  <property name="cloverdir"       value="clover"/>
  <property name="pmd"             value="lib/pmd.jar"/>
  <property name="jaxen"           value="lib/jaxen-core-1.0-fcs.jar"/>
  <property name="saxpath"         value="lib/saxpath-1.0-fcs.jar"/>
  <property name="cloverjar"       value="lib/clover.jar"/>
  <property name="log.properties"  value="jdk14.logging.properties"/>
  <property name="cocoaStubs"      value="${corelib}cocoaFoundation.jar"/>
  <property name="corebin"         value="${coredir}/bin"/>
  <property name="httpclient"      value="${corelib}/commons-httpclient.jar"/>
  <property name="logging"         value="${corelib}/commons-logging.jar"/>

  <!-- constants -->
  <property name="DEBUG" value="yes" />
  <property name="OPTIMIZE" value="no" />
  <property name="DEPRECATION" value="yes" />
  <property name="NOWARN" value="yes"/>

  <!-- default classpath for javac.  it is set as the user's CLASSPATH
       environment with the jar files necessary for compilation appended. -->
  <path id="default.classpath" >
    <pathelement location="${builddir}" />
    <pathelement location="${coredir}" />
    <pathelement location="${collections}" />
    <pathelement location="${xerces}" />
    <pathelement location="${playerlib}" />
    <pathelement location="${mp3sp}" />
	<pathelement location="${ui}" />
    <pathelement location="${mrj}" />
    <pathelement location="${osx}" />
	<pathelement location="${mac}" />
	<pathelement location="${GURL}" />
	<pathelement location="${quicktime}"/>
	<pathelement location="${logicrypto}"/>
	<pathelement location="${datadir}"/>
	<pathelement location="${pmd}"/>
	<pathelement location="${jaxen}"/>
	<pathelement location="${saxpath}"/>
	<pathelement location="${cloverjar}"/>
    <pathelement location="${cocoaStubs}"/>
    <pathelement location="${httpclient}"/>
    <pathelement location="${logging}"/>
  </path>
  
  <!-- CLOVER SETUP TASKS -->
  <target name="with.clover" depends="prepare">
     <taskdef resource="clovertasks"/>
     <available file="${cloverjar}" property="has.clover"/>
     <clover-setup initString="${cloverdir}/limeCloverCoverage.db">
       <fileset dir="${coredir}" defaultexcludes="yes"/>
     </clover-setup>
  </target>
  
  <target name="clover.html" depends="with.clover" if="has.clover">
     <tstamp>
       <format property="clover.time"
               pattern="EEE, MMM d, yyyy hh:mm a"/>
     </tstamp>
     <clover-report>
       <current outfile="${cloverdir}/html/results"
                title="LimeWire - ${clover.time}">
         <format type="html"/> 
       </current>	 
     </clover-report>
  </target>
  
  <target name="clover.history.point" depends="with.clover" if="has.clover">
    <clover-historypoint historyDir="${cloverdir}/history"/>
  </target>
  
  <target name="clover.history.html" depends="with.clover" if="has.clover">
     <tstamp>
       <format property="clover.time"
               pattern="EEE, MMM d, yyyy hh:mm a"/>
     </tstamp>
    <clover-report>
      <historical outfile="${cloverdir}/html/historical"
                  title="LimeWire - ${clover.time}"
                  historyDir="${cloverdir}/history">
        <format type="html"/>
        <overview/>
        <coverage/>
        <metrics/>
        <movers range="20" interval="2w"/>
      </historical>
    </clover-report>
  </target>
  
  <target name="clover.prepare">
    <mkdir dir="${cloverdir}"/>
  </target>
  
  <target name="clover.clean">
    <delete dir="${cloverdir}/html"/>
  </target>
  
  <target name="clover.all" depends="clean, with.clover" if="has.clover">
    <antcall target="test all" inheritRefs="true"/>
    <antcall target="clover.html" inheritRefs="true"/>
    <antcall target="clover.history.point" inheritRefs="true"/>
    <antcall target="clover.history.html" inheritRefs="true"/>
  </target>        

  <!-- Initialization stuff -->
  <target name="init" >
    <!-- we dont do much here right now, but may do later -->
    <tstamp/>
  </target>

  <!-- CLEAN -->
  <target name="clean">
	<delete dir="${builddir}"/>
    <antcall target="clean reports"/>
    <antcall target="clover.clean"/>
  </target>
  
  <!-- clean just the reports -->
  <target name="clean reports">
    <delete dir="${reports}"/>
  </target>
  
  <!-- clean testData dir -->
  <target name="clean testData">
    <delete dir="testData"/>
  </target>
  
  <!-- PREPARE -->
  <target name="prepare">
    <mkdir dir="${builddir}"/>
    <mkdir dir="${reports}"/>
    <mkdir dir="${reports}/html"/>
    <antcall target="clover.prepare"/>
  </target>

 <!-- builds all files, including tests, in the project to the specified directory-->
 <target name="build" depends="prepare">
   <javac debug="on" optimize="off" deprecation="off"
	      srcdir="${coredir}:${guidir}:${basedir}"
	      destdir="${builddir}" nowarn="${NOWARN}"
		  excludes="macosx/**"
		  fork="true" memoryMaximumSize="100m">

     <classpath refid="default.classpath" />
   </javac>
 </target>
 
 <!-- RUNS ALL TESTS. -->
 <!-- Output goes to both XML file and stdout. -->
 <!-- To run, type 'ant "test all"' (without the single quotes). -->
 <!-- Formats the XML output to html. -->
 <target name="test all">
    <antcall target="batchunit" inheritRefs="true">
        <param name="unit" value="**/*Test.class"/>
        <param name="haltonfailure" value="no"/>
        <param name="haltonerror" value="no"/>
    </antcall>
    <antcall target="html"/>
    <antcall target="clean testData"/>
 </target>
 
  <!-- Runs a specific package - passed by 'package' -->
  <!-- Output goes to both XML file and stdout. -->
  <!-- To run, type 'ant -D"package=<mypackage>" "test package"' (without the single quotes). -->
  <!-- Formats the XML output to html. -->
 <target name="test package" if="package">
    <antcall target="batchunit" inheritRefs="true">
        <param name="unit" value="com/limegroup/gnutella/${package}/*Test.class"/>
        <param name="haltonfailure" value="no"/>
        <param name="haltonerror" value="no"/>
    </antcall>
    <antcall target="html"/>
    <antcall target="clean testData"/>
 </target>
 
 <!-- Runs a specific class, passing the output to the shell & XML file-->
 <!-- class name specified by class passed by 'class' -->
 <!-- For example, to run UltrapeerRoutingTest, you would type: -->
 <!-- ant -D"class=UltrapeerRoutingTest" test -->
 <!-- To test, say, DownloadTest, you would type: -->
 <!-- ant -D"class=downloader/DownloadTest" test -->
 <target name="test" if="class">
    <antcall target="batchunit" inheritRefs="true">
        <param name="unit" value="com/limegroup/gnutella/${class}.class"/>
        <param name="haltonfailure" value="yes"/>
        <param name="haltonerror" value="yes"/>
    </antcall>
    <antcall target="html"/>
    <antcall target="clean testData"/>
 </target>
 
  <!-- Runs a specific class, passing the output to the shell & XML file-->
 <!-- class name specified by class passed by 'class' -->
 <!-- For example, to run UltrapeerRoutingTest, you would type: -->
 <!-- ant -D"class=UltrapeerRoutingTest" test -->
 <!-- To test, say, DownloadTest, you would type: -->
 <!-- ant -D"class=downloader/DownloadTest" test -->
 <target name="testnofail" if="class">
    <antcall target="batchunit" inheritRefs="true">
        <param name="unit" value="com/limegroup/gnutella/${class}.class"/>
        <param name="haltonfailure" value="no"/>
        <param name="haltonerror" value="no"/>
    </antcall>
    <antcall target="html"/>
    <antcall target="clean testData"/>
 </target>  

 
 <!-- To be used internally by 'test all', 'test package' & 'test' -->
 <target name="batchunit" if="unit" depends="clean testData, prepare, build"> 
        <junit printsummary="withOutAndErr"
               haltonfailure="${haltonfailure}"
               haltonerror="${haltonerror}"
               failureproperty="testfailed"
               showoutput="true"
               fork="on"
        >
        
            <jvmarg value="-Djava.library.path=${corebin}"/>
            <jvmarg value="-Djava.util.logging.config.file=${log.properties}"/>
            <classpath refid="default.classpath" />
            
            <formatter type="xml" />
            <formatter type="plain" useFile="false"/>
            
            <batchtest fork="on"
                       todir="${reports}" >
                <fileset dir="${builddir}" 
                         includes="${unit}" />
            </batchtest>    
        </junit>
 </target>
 
  <!-- Converts the XML output to pretty HTML reports -->
 <target name="html">
	<junitreport todir="${reports}">
	    <fileset dir="${reports}">
	        <include name="TEST-*.xml"/>
	    </fileset>	    
	    <report format="frames" todir="${reports}/html"/>
	</junitreport>
 </target> 
 
</project>


