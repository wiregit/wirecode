package com.limegroup.gnutella.malware;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;

import org.limewire.io.InvalidDataException;

import com.limegroup.gnutella.downloader.serial.DownloadMemento;

/**
 * Class that can be used to simulate a the VirusDefinitionDownloader by 
 *  intelligently returning a dynamic nfo and redirecting fetches to the appropriate
 *  file already on disk without actually downloading anything.
 */
public class RedirectedVirusDefinitionDownloader extends MockVirusDefinitionDownloader{
    
    private String[] nfoEntries;
    protected String name;
    protected DownloadMemento memento;
    private final File updatesLocation;
    
    private final boolean asyncronous;
    
    public RedirectedVirusDefinitionDownloader(File updatesLocation, String[] nfoEntries) {
        this(updatesLocation, nfoEntries, false);
    }
    
    public RedirectedVirusDefinitionDownloader(File updatesLocation, String[] nfoEntries, boolean asyncronous) {
        this.updatesLocation = updatesLocation;
        this.nfoEntries = nfoEntries;
        this.asyncronous = asyncronous;
    }
    
    public void setNfoEntries(String[] nfoEntries) {
        this.nfoEntries = nfoEntries;
    }
    
    @Override
    public void setUriAndName(URI uri, String name) {
            this.name = name;
            this.memento = null;
    }
    
    @Override
    public void fetch(VirusDefinitionHandler handler, File mementoFile, File mementoBackupFile) {
        if (handler.getClass().getName().indexOf("NFOHandler") > -1) {
            VirusUtils.getDatabaseDirectory().mkdirs();
            File nfoFile = new File(VirusUtils.getDatabaseDirectory(), name);
            try {
                BufferedWriter writter = new BufferedWriter(new FileWriter(nfoFile));
                for ( String entry : nfoEntries ) {
                    writter.write(entry);
                    writter.write('\n');
                }
                writter.close();
            } catch (IOException e) {
                // Ignore, will fail when file is empty
            }

            kickOffHandler(handler, nfoFile);
        } else {
            File updateFile;
            if (memento == null) {
                updateFile = new File(updatesLocation, name);
            } 
            else {
                updateFile = memento.getSaveFile();
            }
            
            kickOffHandler(handler, updateFile);    
        }
    }
    
    @Override
    public void initFromMemento(DownloadMemento memento) throws InvalidDataException {
        this.name = null;
        this.memento = memento;
    }
    
    private void kickOffHandler(final VirusDefinitionHandler handler, final File file) {
        if (asyncronous) {
            new Thread() {
                @Override
                public void run() {
                    try {
                        Thread.sleep(1000);
                    }
                    catch (InterruptedException e) {
                    }
                    handler.downloadSucceeded(file);
                }
            }.start();
        } 
        else {
            handler.downloadSucceeded(file);
        }
    }
    
    public File getUpdatesLocation() {
        return updatesLocation;
    }
}
