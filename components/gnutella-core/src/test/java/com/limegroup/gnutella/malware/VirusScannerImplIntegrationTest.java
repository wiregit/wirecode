package com.limegroup.gnutella.malware;

import java.io.File;
import java.io.IOException;

import org.jmock.Mockery;
import org.limewire.core.settings.DownloadSettings;
import org.limewire.core.settings.FilterSettings;
import org.limewire.gnutella.tests.LimeTestCase;
import org.limewire.io.Expand;
import org.limewire.util.FileUtils;

public class VirusScannerImplIntegrationTest extends LimeTestCase {
    private static final String AVG_ROOT_ENV = "AVG_ROOT";
    private File testFiles = null;
    private VirusScanner virusScanner = null;
    
    /**
     * @return the root directory containing avg testing files. 
     */
    public static File getAVGRootEnvironment() {
        return getFileFromEnvironmentVariable(AVG_ROOT_ENV);
    }
    
    /**
     * @return directory containing avg update zip files. 
     */
    public static File getAVGUpdatesDirectory() {
        File updatesLocation = new File(VirusScannerImplIntegrationTest.getAVGRootEnvironment(), "avg-updates");
        
        if (!updatesLocation.exists()) {
            updatesLocation = new File("c:\\avg-updates");
        }
        
        return updatesLocation;        
    }
    
    @Override
    protected void setUp() throws Exception {
        testFiles = new File(getAVGRootEnvironment(), "test-files");
        FilterSettings.TEST_VIRUS_SCANNER.setValue(true);
        FileUtils.deleteRecursive(VirusUtils.getDatabaseDirectory());
        FileUtils.copyDirectory(new File(getAVGRootEnvironment(), "database"), VirusUtils.getDatabaseDirectory());
        FileUtils.copy(new File(getAVGRootEnvironment(), "avg-test/license"), VirusUtils.getLicenseFile());
        Mockery context = new Mockery();
        VirusDefinitionManager virusDefinitionManager = context.mock(VirusDefinitionManager.class);
        virusScanner = new VirusScannerImpl(virusDefinitionManager, new MockAntivirusSupportConfiguration());
    }
    
    @Override
    protected void tearDown() throws Exception {
        virusScanner.stopScanner();
    }
    
    public void testNonExistantFile() throws Exception {
        File testFile = new File(testFiles, "zasdasd.txt");
        assertFalse(testFile.exists());
        assertFalse(virusScanner.isInfected(testFile));
    }
    
    public void testNonInfectedFile() throws Exception {
        File testFile = new File(testFiles, "ok1.txt");
        assertTrue(testFile.exists());
        assertFalse(virusScanner.isInfected(testFile));
    }
    
    public void testNonInfectedFileInspections() throws Exception {
        DownloadSettings.INFECTED_EXTENSIONS.get().clear();
        DownloadSettings.NUM_SCANNED_CLEAN.set(0);
        DownloadSettings.NUM_SCANNED_INFECTED.set(0);
        
        File testFile = new File(testFiles, "ok1.txt");
        virusScanner.isInfected(testFile);
        
        assertTrue(DownloadSettings.INFECTED_EXTENSIONS.get().isEmpty());
        assertEquals(1, DownloadSettings.NUM_SCANNED_CLEAN.getValue());
        assertEquals(0, DownloadSettings.NUM_SCANNED_INFECTED.getValue());
    }
    
    public void testInfectedFile() throws Exception {
        File testFile = new File(testFiles, "eicar.com.txt");
        assertTrue(testFile.exists());
        assertTrue(virusScanner.isInfected(testFile));
    }
    
    
    public void testInfectedFileInspections() throws Exception {
        DownloadSettings.INFECTED_EXTENSIONS.get().clear();
        DownloadSettings.NUM_SCANNED_CLEAN.set(0);
        DownloadSettings.NUM_SCANNED_INFECTED.set(0);
        
        File testFile = new File(testFiles, "eicar.com.txt");
        virusScanner.isInfected(testFile);

        assertEquals("1", DownloadSettings.INFECTED_EXTENSIONS.get().getProperty(FileUtils.getFileExtension(testFile)));
        assertEquals(0, DownloadSettings.NUM_SCANNED_CLEAN.getValue());
        assertEquals(1, DownloadSettings.NUM_SCANNED_INFECTED.getValue());        

        virusScanner.isInfected(testFile);
        assertEquals("2", DownloadSettings.INFECTED_EXTENSIONS.get().getProperty(FileUtils.getFileExtension(testFile)));
    }
    
    public void testNoDefinitionsGettingVersion() throws Exception {
        virusScanner.stopScanner();
        FileUtils.deleteRecursive(VirusUtils.getDatabaseDirectory());
        assertEquals(0, virusScanner.getDefinitionsVersion());
    }
    
    public void testDefinitionsGettingVersion() throws Exception {
        assertEquals(3157, virusScanner.getDefinitionsVersion());
    }
    
    public void testGettingLibraryVersionNumber() throws Exception {
        assertEquals(8425, virusScanner.getLibraryBuildVersion());
    }
    
    public void testLoadFullUpdate() throws Exception {
        assertEquals(3157, virusScanner.getDefinitionsVersion());
        File testFile = new File(testFiles, "eicar.com.txt");
        assertTrue(testFile.exists());
        assertTrue(virusScanner.isInfected(testFile));
        virusScanner.loadFullUpdate(buildUpdateDirectory("avgsdk_vdb3158.zip"));
        assertEquals(3158, virusScanner.getDefinitionsVersion());
        assertTrue(virusScanner.isInfected(testFile));
    }
    
    public void testLoadFullUpdateInspections() throws Exception {
        DownloadSettings.NUM_AV_FULL_UPDATES_FAILED.set(0);
        DownloadSettings.NUM_AV_FULL_UPDATES_SUCCEEDED.set(0);
        DownloadSettings.NUM_AV_INCREMENTAL_UPDATES_FAILED.set(0);
        DownloadSettings.NUM_AV_INCREMENTAL_UPDATES_SUCCEEDED.set(0);

        virusScanner.loadFullUpdate(buildUpdateDirectory("avgsdk_vdb3158.zip"));
        
        assertEquals(0, DownloadSettings.NUM_AV_FULL_UPDATES_FAILED.getValue());
        assertEquals(1, DownloadSettings.NUM_AV_FULL_UPDATES_SUCCEEDED.getValue());
        assertEquals(0, DownloadSettings.NUM_AV_INCREMENTAL_UPDATES_FAILED.getValue());
        assertEquals(0, DownloadSettings.NUM_AV_INCREMENTAL_UPDATES_SUCCEEDED.getValue());
    }
    
    public void testLoadFullUpdateFailedInspections() throws Exception {
        DownloadSettings.NUM_AV_FULL_UPDATES_FAILED.set(0);
        DownloadSettings.NUM_AV_FULL_UPDATES_SUCCEEDED.set(0);
        DownloadSettings.NUM_AV_INCREMENTAL_UPDATES_FAILED.set(0);
        DownloadSettings.NUM_AV_INCREMENTAL_UPDATES_SUCCEEDED.set(0);

        try {
            virusScanner.loadFullUpdate(new File("this is not a real file"));
            //fail if no exception is thrown 
            fail("Exception not thrown");
        } catch (VirusScanException e){
            //expected
        }
        
        assertEquals(1, DownloadSettings.NUM_AV_FULL_UPDATES_FAILED.getValue());
        assertEquals(0, DownloadSettings.NUM_AV_FULL_UPDATES_SUCCEEDED.getValue());
        assertEquals(0, DownloadSettings.NUM_AV_INCREMENTAL_UPDATES_FAILED.getValue());
        assertEquals(0, DownloadSettings.NUM_AV_INCREMENTAL_UPDATES_SUCCEEDED.getValue());
    }

    public void testLoadIncrementalUpdate() throws Exception {        
        assertEquals(3157, virusScanner.getDefinitionsVersion());
        File testFile = new File(testFiles, "eicar.com.txt");
        assertTrue(testFile.exists());
        assertTrue(virusScanner.isInfected(testFile));
        virusScanner.loadIncrementalUpdate(buildUpdateDirectory("avgsdk_ivdb3158.zip"));
        assertEquals(3158, virusScanner.getDefinitionsVersion());
        assertTrue(virusScanner.isInfected(testFile));
    }
    
    public void testLoadIncrementalUpdateInspections() throws Exception {
        DownloadSettings.NUM_AV_FULL_UPDATES_FAILED.set(0);
        DownloadSettings.NUM_AV_FULL_UPDATES_SUCCEEDED.set(0);
        DownloadSettings.NUM_AV_INCREMENTAL_UPDATES_FAILED.set(0);
        DownloadSettings.NUM_AV_INCREMENTAL_UPDATES_SUCCEEDED.set(0);

        virusScanner.loadIncrementalUpdate(buildUpdateDirectory("avgsdk_ivdb3158.zip"));
        
        assertEquals(0, DownloadSettings.NUM_AV_FULL_UPDATES_FAILED.getValue());
        assertEquals(0, DownloadSettings.NUM_AV_FULL_UPDATES_SUCCEEDED.getValue());
        assertEquals(0, DownloadSettings.NUM_AV_INCREMENTAL_UPDATES_FAILED.getValue());
        assertEquals(1, DownloadSettings.NUM_AV_INCREMENTAL_UPDATES_SUCCEEDED.getValue());
    }
    
 
    public void testLoadIncrementalUpdateFailedInspections() throws Exception {
        DownloadSettings.NUM_AV_FULL_UPDATES_FAILED.set(0);
        DownloadSettings.NUM_AV_FULL_UPDATES_SUCCEEDED.set(0);
        DownloadSettings.NUM_AV_INCREMENTAL_UPDATES_FAILED.set(0);
        DownloadSettings.NUM_AV_INCREMENTAL_UPDATES_SUCCEEDED.set(0);

        try {
            virusScanner.loadIncrementalUpdate(new File("this is not a real file"));
            //fail if no exception is thrown 
            fail("Exception not thrown");
        } catch (IOException e) {
            //expected
        }
        
        assertEquals(0, DownloadSettings.NUM_AV_FULL_UPDATES_FAILED.getValue());
        assertEquals(0, DownloadSettings.NUM_AV_FULL_UPDATES_SUCCEEDED.getValue());
        assertEquals(1, DownloadSettings.NUM_AV_INCREMENTAL_UPDATES_FAILED.getValue());
        assertEquals(0, DownloadSettings.NUM_AV_INCREMENTAL_UPDATES_SUCCEEDED.getValue());
    }
    
    /**
     * Finds the zip file with the given name. Unzips it into a temporary directory,
     * and returns the directory named by the zip file. 
     */
    private File buildUpdateDirectory(String updateZipFile) throws IOException {
        File tempDir = File.createTempFile("tmp", "");
        tempDir.delete();
        tempDir.mkdirs();
        File zipFile = new File(getAVGUpdatesDirectory(), updateZipFile);
        Expand.expandFile(zipFile, tempDir);
        return new File(tempDir, FileUtils.getFilenameNoExtension(updateZipFile));
    }
    
    /**
     * @return a File path stored in the given environment variable, or null if none exists. 
     */
    private static File getFileFromEnvironmentVariable(String environmentVariable) {
        File file = null;
        try {
            String fileEnvPath = System.getenv(environmentVariable);
            if(fileEnvPath != null && !fileEnvPath.trim().equals("")) {
                file = new File(fileEnvPath);
            }
        } catch(SecurityException ignore) {
        }
        return file;
    }
}
