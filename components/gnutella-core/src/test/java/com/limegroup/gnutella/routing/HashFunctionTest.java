package com.limegroup.gnutella.routing;

import junit.framework.*;
import com.limegroup.gnutella.util.PrivilegedAccessor;
import com.limegroup.gnutella.util.BaseTestCase;
import com.sun.java.util.collections.*;

/**
 * Unit tests for HashFunction
 */
public class HashFunctionTest extends BaseTestCase {
        
	public HashFunctionTest(String name) {
		super(name);
	}

	public static Test suite() {
		return buildTestSuite(HashFunctionTest.class);
	}

	public static void main(String[] args) {
		junit.textui.TestRunner.run(suite());
	}
	
	public void testNormal() {
        //1. Basic HashFunction.hash tests.  These unit tests were generated by the reference
        //implementation of HashFunction.  Some I've checked manually.
        assertEquals(0, HashFunction.hash("", (byte)13));
        assertEquals(6791, HashFunction.hash("eb", (byte)13));
        assertEquals(7082, HashFunction.hash("ebc", (byte)13));
        assertEquals(6698, HashFunction.hash("ebck", (byte)13));
        assertEquals(3179, HashFunction.hash("ebckl", (byte)13));
        assertEquals(3235, HashFunction.hash("ebcklm", (byte)13));
        assertEquals(6438, HashFunction.hash("ebcklme", (byte)13));
        assertEquals(1062, HashFunction.hash("ebcklmen", (byte)13));
        assertEquals(3527, HashFunction.hash("ebcklmenq", (byte)13));
        assertEquals(0, HashFunction.hash("", (byte)16));
        assertEquals(65003, HashFunction.hash("n", (byte)16));
        assertEquals(54193, HashFunction.hash("nd", (byte)16));
        assertEquals(4953, HashFunction.hash("ndf", (byte)16));
        assertEquals(58201, HashFunction.hash("ndfl", (byte)16));
        assertEquals(34830, HashFunction.hash("ndfla", (byte)16));
        assertEquals(36910, HashFunction.hash("ndflal", (byte)16));
        assertEquals(34586, HashFunction.hash("ndflale", (byte)16));
        assertEquals(37658, HashFunction.hash("ndflalem", (byte)16));
        assertEquals(45559, HashFunction.hash("ndflaleme", (byte)16));
        assertEquals(318, HashFunction.hash("ol2j34lj", (byte)10));
        assertEquals(503, HashFunction.hash("asdfas23", (byte)10));
        assertEquals(758, HashFunction.hash("9um3o34fd", (byte)10));
        assertEquals(281, HashFunction.hash("a234d", (byte)10));
        assertEquals(767, HashFunction.hash("a3f", (byte)10));
        assertEquals(581, HashFunction.hash("3nja9", (byte)10));
        assertEquals(146, HashFunction.hash("2459345938032343", (byte)10));
        assertEquals(342, HashFunction.hash("7777a88a8a8a8", (byte)10));
        assertEquals(861, HashFunction.hash("asdfjklkj3k", (byte)10));
        assertEquals(1011, HashFunction.hash("adfk32l", (byte)10));
        assertEquals(944, HashFunction.hash("zzzzzzzzzzz", (byte)10));
    }
    
    public void testOffset() {
        //2. Offset tests.
        assertEquals(58201, HashFunction.hash("ndfl", 0, 4, (byte)16));
        assertEquals(58201, HashFunction.hash("_ndfl_", 1, 1+4, (byte)16));
        assertEquals(58201, HashFunction.hash("__ndfl__", 2, 2+4, (byte)16));
        assertEquals(58201, HashFunction.hash("___ndfl___", 3, 3+4, (byte)16));
    }
    
    public void testCase() {
        //3. Case tests.
        assertEquals(581, HashFunction.hash("3nja9", (byte)10));
        assertEquals(581, HashFunction.hash("3NJA9", (byte)10));
        assertEquals(581, HashFunction.hash("3nJa9", (byte)10));
    }
}