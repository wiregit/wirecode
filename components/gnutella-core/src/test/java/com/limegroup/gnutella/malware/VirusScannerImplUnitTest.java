package com.limegroup.gnutella.malware;

import junit.framework.Test;

import org.jmock.Expectations;
import org.jmock.Mockery;
import org.limewire.gnutella.tests.LimeTestCase;
import org.limewire.lifecycle.ServiceRegistry;

public class VirusScannerImplUnitTest extends LimeTestCase {
    private VirusScannerImpl scanner;
    private Mockery mock;
    private VirusDefinitionManager virusDefinitionManager;

    public static Test suite() {
        return buildTestSuite(VirusScannerImplUnitTest.class);
    }

       
    private void setUp(AntivirusSupportConfiguration delegate){
        mock = new Mockery();
        virusDefinitionManager = mock.mock(VirusDefinitionManager.class);
        
        scanner = new VirusScannerImpl(virusDefinitionManager, delegate);
    }

  
    public void testGetServiceName() throws Exception {
        setUp(new MockAntivirusSupportConfiguration()); 
        assertEquals("AntiVirusService", scanner.getServiceName());
    }


    public void testRegister() throws Exception {
        setUp(new MockAntivirusSupportConfiguration()); 
        final ServiceRegistry serviceRegistry = mock.mock(ServiceRegistry.class);
        mock.checking(new Expectations(){{
            one(serviceRegistry).register(scanner);
        }});
        scanner.register(serviceRegistry);
        mock.assertIsSatisfied();
    }


    public void testIsSupported(){
        setUp(new MockAntivirusSupportConfiguration());        
        assertTrue(scanner.isSupported());        
    }
    
    public void testNonAvgCompatibleWindowsNotSupported(){
                AntivirusSupportConfiguration nonCompatibleWindows = new MockAntivirusSupportConfiguration(){
            @Override
            public boolean isAVGCompatibleWindows() {
                return false;
            }
        };
        setUp(nonCompatibleWindows);

        //should not be supported if not compatible windows
        assertFalse(scanner.isSupported());        
    }

    public void testProSupport(){
        AntivirusSupportConfiguration notPro = new MockAntivirusSupportConfiguration(){
            @Override
            public boolean isPro() {
                return false;
            }
        };
        setUp(notPro);
        //should not be supported if not pro and not a supported beta
        assertFalse(scanner.isSupported());        
    }
    
    public void testTempDirectorySupport(){
        AntivirusSupportConfiguration tempDirInUse = new MockAntivirusSupportConfiguration(){
            @Override
            public boolean isTemporaryDirectoryInUse() {
                return true;
            }
        };
        setUp(tempDirInUse);
        //should not be supported if the temp dir is in use
        assertFalse(scanner.isSupported());        
    }
    
    public void testNotUseVirusScan(){
        AntivirusSupportConfiguration notUseVirusScan = new MockAntivirusSupportConfiguration(){
            @Override
            public boolean isVirusScannerInUse() {
                return false;
            }
        };
        setUp(notUseVirusScan);
        //should not be supported if isUseVirusScan() is false
        assertFalse(scanner.isSupported());        
    }
    
    public void testBetaReleaseSupport(){
        AntivirusSupportConfiguration supportedBeta = new MockAntivirusSupportConfiguration() {
            @Override
            public boolean isBetaRelease() {
                return true;
            }

            @Override
            public boolean isRemoveFromFreeVersion5_4() {
                return false;
            }
            
            @Override
            public boolean isPro() {
                return false;
            }
        };
        
        setUp(supportedBeta);
        //beta should be supported if isRemoveFromFreeVersion5_4() returns false 
        assertTrue(scanner.isSupported());        
        
        AntivirusSupportConfiguration unSupportedBeta = new MockAntivirusSupportConfiguration() {
            @Override
            public boolean isBetaRelease() {
                return true;
            }

            @Override
            public boolean isRemoveFromFreeVersion5_4() {
                return true;
            }
            
            @Override
            public boolean isPro() {
                return false;
            }
        };
        
        setUp(unSupportedBeta);
        //beta should not be supported if isRemoveFromFreeVersion5_4() returns true 
        assertFalse(scanner.isSupported());    
    }
    
    
    public void testTestingVersionSupport(){
        AntivirusSupportConfiguration supportedTestingVersion = new MockAntivirusSupportConfiguration() {
            @Override
            public boolean isTestingVersion() {
                return true;
            }

            @Override
            public boolean isTestVirusScanner() {
                return true;
            }
            
            @Override
            public boolean isPro() {
                return false;
            }
        };
        
        setUp(supportedTestingVersion);
        //testing version should be supported if isTestVirusScanner() returns true 
        assertTrue(scanner.isSupported());        
        
        AntivirusSupportConfiguration unSupportedTestingVersion = new MockAntivirusSupportConfiguration() {
            @Override
            public boolean isTestingVersion() {
                return true;
            }

            @Override
            public boolean isTestVirusScanner() {
                return false;
            }
            
            @Override
            public boolean isPro() {
                return false;
            }
        };
        setUp(unSupportedTestingVersion);
        //testing version should not be supported if isTestVirusScanner() returns false 
        assertFalse(scanner.isSupported());    
    }
    
    
}
