package com.limegroup.gnutella.malware;

import junit.framework.Test;

import org.jmock.Expectations;
import org.jmock.Mockery;
import org.limewire.activation.api.ActivationManager;
import org.limewire.gnutella.tests.LimeTestCase;
import org.limewire.lifecycle.ServiceRegistry;
import org.limewire.listener.EventListener;

public class VirusScannerImplUnitTest extends LimeTestCase {
    private VirusScannerImpl scanner;
    private Mockery mock;

    public static Test suite() {
        return buildTestSuite(VirusScannerImplUnitTest.class);
    }

       
    private void setUp(AntivirusSupportConfiguration delegate){
        mock = new Mockery();
        VirusDefinitionManager virusDefinitionManager = mock.mock(VirusDefinitionManager.class);
        
        scanner = new VirusScannerImpl(virusDefinitionManager, delegate);
    }

  
    public void testGetServiceName() throws Exception {
        setUp(new MockAntivirusSupportConfiguration()); 
        assertEquals("AntiVirusService", scanner.getServiceName());
    }


    @SuppressWarnings("unchecked")
    public void testRegister() throws Exception {
        setUp(new MockAntivirusSupportConfiguration()); 
        final ServiceRegistry serviceRegistry = mock.mock(ServiceRegistry.class);
        final ActivationManager activationManager = mock.mock(ActivationManager.class);
        mock.checking(new Expectations(){{
            one(serviceRegistry).register(scanner);
            one(activationManager).addModuleListener(with(any(EventListener.class)));
        }});
        scanner.register(serviceRegistry, activationManager);
        mock.assertIsSatisfied();
    }


    public void testIsSupported(){
        setUp(new MockAntivirusSupportConfiguration());        
        assertTrue(scanner.isSupported());        
    }
    
    public void testNonAvgCompatibleWindowsNotSupported(){
        MockAntivirusSupportConfiguration nonCompatibleWindows = new MockAntivirusSupportConfiguration();
        nonCompatibleWindows.isAVGCompatibleWindows = false;
        setUp(nonCompatibleWindows);

        //should not be supported if not compatible windows
        assertFalse(scanner.isSupported());        
    }

    public void testAVGModuleSupport(){
        MockAntivirusSupportConfiguration avgDisabled = new MockAntivirusSupportConfiguration();
        avgDisabled.isAVGModuleActivated = false;
        setUp(avgDisabled);
        //should not be supported if not pro and not a supported beta
        assertFalse(scanner.isSupported());
        
        MockAntivirusSupportConfiguration avgEnabled = new MockAntivirusSupportConfiguration();
        avgEnabled.isAVGModuleActivated = true;
   
        setUp(avgEnabled);
        assertTrue(scanner.isSupported());
    }
    
    public void testTempDirectorySupport(){
        MockAntivirusSupportConfiguration tempDirInUse = new MockAntivirusSupportConfiguration();            
        tempDirInUse.isTemporaryDirectoryInUse = true;            
        setUp(tempDirInUse);
        //should not be supported if the temp dir is in use
        assertFalse(scanner.isSupported());        
    }
    
    public void testVirusScanNotEnabled(){
        MockAntivirusSupportConfiguration notEnabled = new MockAntivirusSupportConfiguration();            
        notEnabled.isVirusScannerEnabled = false;
        setUp(notEnabled);
        //should not be enabled if isVirusScannerEnabled() is false
        assertFalse(scanner.isEnabled());        
        

        MockAntivirusSupportConfiguration enabledNotSupported = new MockAntivirusSupportConfiguration();            
        enabledNotSupported.isVirusScannerEnabled = true;         
        enabledNotSupported.isAVGModuleActivated = false;
        setUp(enabledNotSupported);
        //should not be enabled if isPro() is false
        assertFalse(scanner.isEnabled());        
    } 
    
}
