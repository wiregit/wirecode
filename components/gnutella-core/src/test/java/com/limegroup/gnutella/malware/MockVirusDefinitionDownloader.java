package com.limegroup.gnutella.malware;

import java.io.File;
import java.net.URI;
import java.util.List;

import org.limewire.core.api.download.DownloadException;
import org.limewire.core.api.download.DownloadPiecesInfo;
import org.limewire.core.api.transfer.SourceInfo;
import org.limewire.io.Address;
import org.limewire.io.GUID;
import org.limewire.io.InvalidDataException;
import org.limewire.listener.EventListener;

import com.limegroup.gnutella.InsufficientDataException;
import com.limegroup.gnutella.RemoteFileDesc;
import com.limegroup.gnutella.URN;
import com.limegroup.gnutella.downloader.DownloadStateEvent;
import com.limegroup.gnutella.downloader.DownloaderType;
import com.limegroup.gnutella.downloader.serial.DownloadMemento;

public class MockVirusDefinitionDownloader implements VirusDefinitionDownloader {
    @Override
    public void fetch(VirusDefinitionHandler handler, File mementoFile, File mementoBackupFile) {
    }
    @Override
    public void setUriAndName(URI uri, String name) {
    }
    @Override
    public boolean conflicts(URN urn, long fileSize, File... files) {
        return false;
    }
    @Override
    public boolean conflictsSaveFile(File saveFile) {
        return false;
    }
    @Override
    public boolean conflictsWithIncompleteFile(File incomplete) {
        return false;
    }
    @Override
    public void finish() {
    }
    @Override
    public DownloaderType getDownloadType() {
        return null;
    }
    @Override
    public GUID getQueryGUID() {
        return null;
    }
    @Override
    public void handleInactivity() {
    }
    @Override
    public void initFromMemento(DownloadMemento memento) throws InvalidDataException {
    }
    @Override
    public void initialize() {
    }
    @Override
    public boolean isAlive() {
        return false;
    }
    @Override
    public boolean isMementoSupported() {
        return false;
    }
    @Override
    public boolean isQueuable() {
        return false;
    }
    @Override
    public void setInactivePriority(int priority) {
    }
    @Override
    public boolean shouldBeRemoved() {
        return false;
    }
    @Override
    public boolean shouldBeRestarted() {
        return false;
    }
    @Override
    public void startDownload() {
    }
    @Override
    public DownloadMemento toMemento() {
        return null;
    }
    @Override
    public void deleteIncompleteFiles() {
    }
    @Override
    public void discardUnscannedPreview(boolean delete) {
    }
    @Override
    public long getAmountLost() {
        return 0;
    }
    @Override
    public int getAmountPending() {
        return 0;
    }
    @Override
    public long getAmountRead() {
        return 0;
    }
    @Override
    public long getAmountVerified() {
        return 0;
    }
    @Override
    public Object getAttribute(String key) {
        return null;
    }
    @Override
    public int getChunkSize() {
        return 0;
    }
    @Override
    public long getContentLength() {
        return 0;
    }
    @Override
    public File getDownloadFragment(ScanListener listener) {
        return null;
    }
    @Override
    public File getFile() {
        return null;
    }
    @Override
    public int getInactivePriority() {
        return 0;
    }
    @Override
    public int getNumHosts() {
        return 0;
    }
    @Override
    public DownloadPiecesInfo getPieceInfo() {
        return null;
    }
    @Override
    public int getQueuePosition() {
        return 0;
    }
    @Override
    public int getQueuedHostCount() {
        return 0;
    }
    @Override
    public int getRemainingStateTime() {
        return 0;
    }
    @Override
    public List<RemoteFileDesc> getRemoteFileDescs() {
        return null;
    }
    @Override
    public File getSaveFile() {
        return null;
    }
    @Override
    public URN getSha1Urn() {
        return null;
    }
    @Override
    public List<Address> getSourcesAsAddresses() {
        return null;
    }
    @Override
    public List<SourceInfo> getSourcesDetails() {
        return null;
    }
    @Override
    public DownloadState getState() {
        return null;
    }
    @Override
    public boolean isCompleted() {
        return false;
    }
    @Override
    public boolean isLaunchable() {
        return false;
    }
    @Override
    public boolean isPaused() {
        return false;
    }
    @Override
    public boolean isRelocatable() {
        return false;
    }
    @Override
    public void pause() {
    }
    @Override
    public Object removeAttribute(String key) {
        return null;
    }
    @Override
    public boolean resume() {
        return false;
    }
    @Override
    public Object setAttribute(String key, Object value, boolean serialize) {
        return null;
    }
    @Override
    public void setSaveFile(File saveDirectory, String fileName, boolean overwrite)
            throws DownloadException {
    }
    @Override
    public void stop() {
    }
    @Override
    public float getAverageBandwidth() {
        return 0;
    }
    @Override
    public float getMeasuredBandwidth() throws InsufficientDataException {
        return 0;
    }
    @Override
    public void measureBandwidth() {
    }
    @Override
    public void addListener(EventListener<DownloadStateEvent> listener) {
    }
    @Override
    public boolean removeListener(EventListener<DownloadStateEvent> listener) {
        return false;
    }
}
