package com.limegroup.gnutella.malware;

import java.io.File;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import org.jmock.Expectations;
import org.jmock.Mockery;
import org.limewire.util.BaseTestCase;
import org.limewire.util.MatchAndCopy;

import com.google.inject.util.Providers;
import com.limegroup.gnutella.malware.VirusDefinitionManagerImpl.NFOHandler;

public class VirusDefintionManagerImplTest extends BaseTestCase {
    
    /**
     * Ensures that the schedule process is started and managed as appropriate.
     */
    public void testSchedule() {
        Mockery context = new Mockery();
        
        final ScheduledExecutorService executor = context.mock(ScheduledExecutorService.class);
        final VirusDefinitionDownloader downloader = context.mock(VirusDefinitionDownloader.class);
        final VirusScanner scanner = context.mock(VirusScanner.class);
        final MatchAndCopy<Runnable> runnableCollector = new MatchAndCopy<Runnable>(Runnable.class);
        
        context.checking(new Expectations() {{
            exactly(1).of(executor).schedule(with(runnableCollector), with(any(Integer.class)), with(any(TimeUnit.class)));
            
            exactly(1).of(downloader).fetch(with(any(NFOHandler.class)), with(same((File)null)), with(same((File)null)));
            allowing(downloader);
            
            exactly(2).of(scanner).isEnabled();
            will(returnValue(true));
            atLeast(1).of(scanner).isSupported();
            will(returnValue(true));
        }});
        
        
        VirusDefinitionManagerImpl manager = new VirusDefinitionManagerImpl(
                Providers.of(downloader), 
                Providers.of(scanner),
                Providers.of("http://tempssadsadasdsad"),
                executor);
        
        // Initialising should start the scheduler 
        manager.initialize();
        
        // Running the scheduled task should schedule yet another task and kick off an update 
        runnableCollector.getLastMatch().run();
        
        context.assertIsSatisfied();
    }
    
    /**
     * Ensure scheduling is not started when virus scanning is not supported 
     */
    public void testScheduleWhenNotSupported() {
        Mockery context = new Mockery();
        
        final ScheduledExecutorService executor = context.mock(ScheduledExecutorService.class);
        final VirusScanner scanner = context.mock(VirusScanner.class);
        
        context.checking(new Expectations() {{
            exactly(0).of(executor).schedule(with(any(Runnable.class)), with(any(Integer.class)), with(any(TimeUnit.class)));
            
            exactly(1).of(scanner).isEnabled();
            will(returnValue(false));
        }});
        
        
        VirusDefinitionManagerImpl manager = new VirusDefinitionManagerImpl(
                null, 
                Providers.of(scanner),
                null,
                executor);
        
        manager.initialize();
        
        context.assertIsSatisfied();
    }
    
    /**
     * Ensure scheduling is cancelled if scheduling support expires.
     * 
     *  // TODO: This is impossible due to caching in VirusScannerImpl!!!
     */
    public void testScheduleWhenSuppoprtedThenNotSupported() {
        Mockery context = new Mockery();
        
        final ScheduledExecutorService executor = context.mock(ScheduledExecutorService.class);
        final VirusScanner scanner = context.mock(VirusScanner.class);
        final MatchAndCopy<Runnable> runnableCollector = new MatchAndCopy<Runnable>(Runnable.class);
        
        context.checking(new Expectations() {{
            exactly(1).of(executor).schedule(with(runnableCollector), with(any(Integer.class)), with(any(TimeUnit.class)));
            
            exactly(1).of(scanner).isEnabled();
            will(returnValue(true));
            
            exactly(1).of(scanner).isEnabled();
            will(returnValue(false));

            atLeast(1).of(scanner).isSupported();
            will(returnValue(true));
        }});
        
        
        VirusDefinitionManagerImpl manager = new VirusDefinitionManagerImpl(
                null, 
                Providers.of(scanner),
                null,
                executor);
        
        // Initialising should start the scheduler 
        manager.initialize();
        
        // Running the scheduled task should not do anything since scanning is no longer supported 
        runnableCollector.getLastMatch().run();
        
        context.assertIsSatisfied();
    }

    
}
