package com.limegroup.gnutella.malware;

import java.util.concurrent.ScheduledExecutorService;

import org.jmock.Expectations;
import org.jmock.Mockery;
import org.limewire.gnutella.tests.LimeTestCase;

import com.google.inject.Provider;

/**
 * Integration test for ensuring update installs work.  Here fake downloads will be
 *  initiated on a single thread by simplying calling back immediately with the location
 *  on disk of the prepared file.  Updates must be installed on the test machine before hand.
 */
public class VirusDefinitionManagerInstallIntegrationTest extends LimeTestCase {

    private final Mockery context = new Mockery();
    
    private VirusDefinitionManagerImpl manager;
    private VirusScannerImpl virusScanner;
    
    private Provider<VirusDefinitionDownloader> virusDefinitionDownloaderProvider;
    private Provider<VirusScanner> virusScannerProvider;
    private Provider<String> updatesURLProvider;
    private ScheduledExecutorService executor;
    
    @Override
    @SuppressWarnings("unchecked")
    public void setUp() {
        virusDefinitionDownloaderProvider = context.mock(Provider.class);
        virusScannerProvider = context.mock(Provider.class);
        updatesURLProvider = context.mock(Provider.class);
        executor = context.mock(ScheduledExecutorService.class);
        
        manager = new VirusDefinitionManagerImpl(
                virusDefinitionDownloaderProvider,
                virusScannerProvider,
                updatesURLProvider,
                executor);
        
        virusScanner = new VirusScannerImpl(manager);
        
        context.checking(new Expectations() {{
            allowing(executor);
            
            allowing(updatesURLProvider).get();
            will(returnValue("http://test.test.test.test.test.test.sdfsdfjsdfhsdfwenvd1"));
            
            allowing(virusScannerProvider).get();
            will(returnValue(virusScanner));
        }});
        
        virusScanner.setSupported(true);
    }
    
    /**
     * Attempt to perform a full update on an empty database.  Ensure the version number changes from
     *  0 to the number contained in the update.
     */
    public void testFullUpdate() {
        final VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(
                new String[] {"VDB: avgsdk_vdb3133.zip"});
        hookDefintionProvider(redirectedDefinitonDownloader);
        
        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(3133, virusScanner.getDefinitionsVersion());
    }
    
    /**
     * Perform a full update followed by two incrementals.  Should update the version accordingly.  
     */
    public void testFullAndTwoIncrementals() {
        final VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(
                new String[] {"IVDB: avgsdk_ivdb3158.zip",
                              "IVDB: avgsdk_ivdb3159.zip",
                              "VDB: avgsdk_vdb3157.zip"});
        hookDefintionProvider(redirectedDefinitonDownloader);

        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(3157, virusScanner.getDefinitionsVersion());
        manager.checkForDefinitions(); // 2nd pass??
        assertEquals(3159, virusScanner.getDefinitionsVersion());
    }
    
    /**
     * One full and two incrementals, the incrementals can not be installed because they are of a lower 
     *  version than the full.
     */
    public void testFullAndTwoIncompatableIncrementals() {
        final VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(
                new String[] {"IVDB: avgsdk_ivdb3078.zip",
                              "IVDB: avgsdk_ivdb3079.zip",
                              "VDB: avgsdk_vdb3157.zip"});
        hookDefintionProvider(redirectedDefinitonDownloader);

        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(3157, virusScanner.getDefinitionsVersion());
        manager.checkForDefinitions(); // 2nd pass??
        assertEquals(3157, virusScanner.getDefinitionsVersion());
    }

    /**
     * One incremental and one full, the incremental is once removed from the full therefore can not be 
     *  installed without the previous one so is left.
     */
    public void testNotEnoughIncrementals() {
        VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(
                new String[] {"IVDB: avgsdk_ivdb3159.zip",
                              "VDB: avgsdk_vdb3157.zip"});
        hookDefintionProvider(redirectedDefinitonDownloader);

        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(3157, virusScanner.getDefinitionsVersion());
        manager.checkForDefinitions(); // 2nd pass??
        assertEquals(3157, virusScanner.getDefinitionsVersion());
    }
    
    private void hookDefintionProvider(final VirusDefinitionDownloader virusDefintionDownloader) {
        context.checking(new Expectations() {{
            allowing(virusDefinitionDownloaderProvider).get();
            will(returnValue(virusDefintionDownloader));
        }});
    }
}
