package com.limegroup.gnutella.malware;

import java.util.concurrent.ScheduledExecutorService;

import org.limewire.gnutella.tests.LimeTestCase;
import org.limewire.inject.Providers;

import com.google.inject.Provider;

/**
 * Integration test for ensuring update installs work.  Here fake downloads will be
 *  initiated on a single thread by simplying calling back immediately with the location
 *  on disk of the prepared file.  Updates must be installed on the test machine before hand.
 */
public class VirusDefinitionManagerInstallIntegrationTest extends LimeTestCase {

    private VirusDefinitionManagerImpl manager;
    private VirusScannerImpl virusScanner;
    
    private MutatableProvider<VirusDefinitionDownloader> virusDefinitionDownloaderProvider;
    private MutatableProvider<VirusScanner> virusScannerProvider;
    private Provider<String> updatesURLProvider;
    private ScheduledExecutorService executor;
    
    @Override
    public void setUp() {
        executor = new MockBackgroundExecutor();
       
        virusScannerProvider = new MutatableProvider<VirusScanner>();
        updatesURLProvider = Providers.of("http://test.test.test.test.test.test.sdfsdfjsdfhsdfwenvd1");
        
        virusDefinitionDownloaderProvider = new MutatableProvider<VirusDefinitionDownloader>();
        
        manager = new VirusDefinitionManagerImpl(
                virusDefinitionDownloaderProvider,
                virusScannerProvider,
                updatesURLProvider,
                executor);
        
        virusScanner = new VirusScannerImpl(manager);
        virusScanner.setSupported(true);
        
        virusScannerProvider.set(virusScanner);
    }
    
    /**
     * Attempt to perform a full update on an empty database.  Ensure the version number changes from
     *  0 to the number contained in the update.
     */
    public void testFullUpdate() {
        final VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(
                new String[] {"VDB: avgsdk_vdb3133.zip"});
        hookDefintionProvider(redirectedDefinitonDownloader);
        
        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(3133, virusScanner.getDefinitionsVersion());
    }
    
    /**
     * Perform a full update followed by two incrementals.  Should update the version accordingly.  
     */
    public void testFullAndTwoIncrementals() {
        final VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(
                new String[] {"IVDB: avgsdk_ivdb3158.zip",
                              "IVDB: avgsdk_ivdb3159.zip",
                              "VDB: avgsdk_vdb3157.zip"});
        hookDefintionProvider(redirectedDefinitonDownloader);

        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(3157, virusScanner.getDefinitionsVersion());
        manager.checkForDefinitions(); // 2nd pass??
        assertEquals(3159, virusScanner.getDefinitionsVersion());
    }
    
    /**
     * One full and two incrementals, the incrementals can not be installed because they are of a lower 
     *  version than the full.
     */
    public void testFullAndTwoIncompatableIncrementals() {
        final VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(
                new String[] {"IVDB: avgsdk_ivdb3078.zip",
                              "IVDB: avgsdk_ivdb3079.zip",
                              "VDB: avgsdk_vdb3157.zip"});
        hookDefintionProvider(redirectedDefinitonDownloader);

        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(3157, virusScanner.getDefinitionsVersion());
        manager.checkForDefinitions(); // 2nd pass??
        assertEquals(3157, virusScanner.getDefinitionsVersion());
    }

    /**
     * One incremental and one full, the incremental is once removed from the full therefore can not be 
     *  installed without the previous one so is left.
     */
    public void testNotEnoughIncrementals() {
        VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(
                new String[] {"IVDB: avgsdk_ivdb3159.zip",
                              "VDB: avgsdk_vdb3157.zip"});
        hookDefintionProvider(redirectedDefinitonDownloader);

        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(3157, virusScanner.getDefinitionsVersion());
        manager.checkForDefinitions(); // 2nd pass??
        assertEquals(3157, virusScanner.getDefinitionsVersion());
    }
    
    private void hookDefintionProvider(final VirusDefinitionDownloader virusDefintionDownloader) {
        virusDefinitionDownloaderProvider.set(virusDefintionDownloader);
        
    }
    
    class MutatableProvider<C> implements Provider<C> {
        
        private C objectToProvide;
        
        private void set(C objectToProvide) {
            this.objectToProvide = objectToProvide;
        }
        
        @Override
        public C get() {
            return objectToProvide;
        }
        
    }
}
