package com.limegroup.gnutella.malware;

import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import org.limewire.core.api.malware.AntivirusUpdateType;
import org.limewire.gnutella.tests.LimeTestCase;
import org.limewire.inject.Providers;
import org.limewire.listener.EventListener;
import org.limewire.util.CommonUtils;
import org.limewire.util.FileUtils;

import com.google.inject.Provider;

/**
 * Integration test for ensuring update installs work.  
 * Updates must be copied locally on the test machine before hand.
 * See {@link RedirectedVirusDefinitionDownloader}
 */
public class VirusDefinitionManagerInstallIntegrationTest extends LimeTestCase {

    private VirusDefinitionManagerImpl manager;
    private VirusScannerImpl virusScanner;
    
    private MutatableProvider<VirusDefinitionDownloader> virusDefinitionDownloaderProvider;
    private MutatableProvider<VirusScanner> virusScannerProvider;
    private Provider<String> updatesURLProvider;
    private ScheduledExecutorService executor;
    
    private static File getAVGUpdatesDirectory() {
        return new File(VirusScannerImplTest.getAVGRootEnvironment(), "avg-updates");
    }
    
    @Override
    public void setUp() {
        executor = new MockBackgroundExecutor();
       
        virusScannerProvider = new MutatableProvider<VirusScanner>();
        updatesURLProvider = Providers.of("http://test.test.test.test.test.test.sdfsdfjsdfhsdfwenvd1");
        
        virusDefinitionDownloaderProvider = new MutatableProvider<VirusDefinitionDownloader>();
        
        manager = new VirusDefinitionManagerImpl(
                virusDefinitionDownloaderProvider,
                virusScannerProvider,
                updatesURLProvider,
                executor);
        
        virusScanner = new VirusScannerImpl(manager, new AntivirusSupportConfigurationImpl());
        virusScanner.setSupported(true);
        
        virusScannerProvider.set(virusScanner);
    }
    
    /**
     * Attempt to perform a full update on an empty database.  Ensure the version number changes from
     *  0 to the number contained in the update.
     */
    public void testFullUpdate() {
        final VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(getAVGUpdatesDirectory(),
                new String[] {"VDB: avgsdk_vdb3133.zip"});
        hookDefintionProvider(redirectedDefinitonDownloader);
        
        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(3133, virusScanner.getDefinitionsVersion());
    }
    
    /**
     * Perform a full update followed by two incrementals.  Should update the version accordingly.  
     */
    public void testFullAndTwoIncrementals() {
        final VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(getAVGUpdatesDirectory(),
                new String[] {"IVDB: avgsdk_ivdb3158.zip",
                              "IVDB: avgsdk_ivdb3159.zip",
                              "VDB: avgsdk_vdb3157.zip"});
        hookDefintionProvider(redirectedDefinitonDownloader);

        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(3157, virusScanner.getDefinitionsVersion());
        manager.checkForDefinitions(); // 2nd pass??
        assertEquals(3159, virusScanner.getDefinitionsVersion());
    }
    
    /**
     * One full and two incrementals, the incrementals can not be installed because they are of a lower 
     *  version than the full.
     */
    public void testFullAndTwoIncompatableIncrementals() {
        final VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(getAVGUpdatesDirectory(),
                new String[] {"IVDB: avgsdk_ivdb3078.zip",
                              "IVDB: avgsdk_ivdb3079.zip",
                              "VDB: avgsdk_vdb3157.zip"});
        hookDefintionProvider(redirectedDefinitonDownloader);

        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(3157, virusScanner.getDefinitionsVersion());
        manager.checkForDefinitions(); // 2nd pass??
        assertEquals(3157, virusScanner.getDefinitionsVersion());
    }

    /**
     * One incremental and one full, the incremental is once removed from the full therefore can not be 
     *  installed without the previous one so is left.
     */
    public void testNotEnoughIncrementals() {
        VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(getAVGUpdatesDirectory(),
                new String[] {"IVDB: avgsdk_ivdb3159.zip",
                              "VDB: avgsdk_vdb3157.zip"});
        hookDefintionProvider(redirectedDefinitonDownloader);

        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(3157, virusScanner.getDefinitionsVersion());
        manager.checkForDefinitions(); // 2nd pass??
        assertEquals(3157, virusScanner.getDefinitionsVersion());
    }
    
    /**
     * One incremental however with no DB or prerequisite full updates.
     */
    public void testIncrementalWithNoDB() {
        VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(getAVGUpdatesDirectory(),
                new String[] {"IVDB: avgsdk_ivdb3159.zip"});
        hookDefintionProvider(redirectedDefinitonDownloader);

        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(0, virusScanner.getDefinitionsVersion());
    }
    
    /**
     * Test two staggered full upgrades.  Install an initial full upgrade then attempt to install another.
     *  The incremental set is not complete so go with a second full upgrade.
     */
    public void testTwoFullUpgrades() {
        RedirectedVirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(getAVGUpdatesDirectory(),
                new String[] {"VDB: avgsdk_vdb3133.zip"});
        hookDefintionProvider(redirectedDefinitonDownloader);

        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(3133, virusScanner.getDefinitionsVersion());
        
        // Add Available Updates
        redirectedDefinitonDownloader.setNfoEntries(new String[] {"VDB: avgsdk_vdb3133.zip", 
                                                                  "VDB: avgsdk_vdb3157.zip", 
                                                                  "IVDB: avgsdk_ivdb3157.zip"});
        
        // Test Updates Again
        manager.checkForDefinitions();
        assertEquals(3157, virusScanner.getDefinitionsVersion());
    }
    
    /**
     * Test with competing upgrade paths.  Can either go from full to incremental or straight 
     *  to the full of the same level as the incremental.  Should take the direct route.
     */
    public void testCompetingUpgradePaths() {
        final VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(getAVGUpdatesDirectory(),
                new String[] {"IVDB: avgsdk_ivdb3158.zip",
                              "VDB: avgsdk_vdb3157.zip",
                              "VDB: avgsdk_vdb3158.zip"});
        hookDefintionProvider(redirectedDefinitonDownloader);

        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(3158, virusScanner.getDefinitionsVersion());
        
    }
    
    public void testAsyncronousUpdates() throws InterruptedException {
        final VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(getAVGUpdatesDirectory(),
                new String[] {"VDB: avgsdk_vdb3157.zip"}, true);
        hookDefintionProvider(redirectedDefinitonDownloader);

        final CountDownLatch latch = new CountDownLatch(1);
        manager.addListener(new EventListener<VirusDefinitionVersionEvent>() {
            @Override
            public void handleEvent(VirusDefinitionVersionEvent event) {
                latch.countDown();
            }
        });
        
        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        latch.await(10, TimeUnit.SECONDS);
        assertEquals(3157, virusScanner.getDefinitionsVersion());
    }

    /**
     * Attempts to simulate installing a full update from a memento then tries an incremental.
     */
    public void testUpdatesWithMemento() throws IOException, URISyntaxException {
        final VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(getAVGUpdatesDirectory(),
                new String[] {"IVDB: avgsdk_ivdb3158.zip", "VDB: avgsdk_vdb3133.zip"});
        hookDefintionProvider(redirectedDefinitonDownloader);
        
        VirusDefinitionDownloadMemento memento = new VirusDefinitionDownloadMemento();
        File updateFile = createTempIncompleteFileForMemento("avgsdk_vdb3157.zip");
        memento.setSaveFile(updateFile);
        memento.setIncompleteFile(updateFile);
        memento.setAntivirusUpdateType(AntivirusUpdateType.FULL);
        memento.setUri(new URI("http://asdsadsadagsdfgsdfmementas"));
        FileUtils.writeObject(manager.getMementoFile(), memento);
        
        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(3157, virusScanner.getDefinitionsVersion());
        manager.checkForDefinitions(); // 2nd pass??
        assertEquals(3158, virusScanner.getDefinitionsVersion());
    }
    
    /**
     * Attempts to proceed with an incomplete memento, the memento should be cleared and no update performed.
     */
    public void testUpdatesWithIncompleteMemento() throws IOException, URISyntaxException {
        final VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(getAVGUpdatesDirectory(),
                new String[] {"IVDB: avgsdk_ivdb3158.zip"});
        hookDefintionProvider(redirectedDefinitonDownloader);
        
        VirusDefinitionDownloadMemento memento = new VirusDefinitionDownloadMemento();
        File updateFile = createTempIncompleteFileForMemento("avgsdk_vdb3157.zip");
        memento.setSaveFile(updateFile);
        memento.setIncompleteFile(updateFile);
        FileUtils.writeObject(manager.getMementoFile(), memento);
        
        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(0, virusScanner.getDefinitionsVersion());
        
        // Ensure incomplete memento was removed
        assertFalse(manager.getMementoFile().exists());
    }

    /**
     * Updates using a memento for a full install while having a newer update online.  Should accept the newer
     *  update after completing the memento download. 
     */
    public void testUpdatesWithCompetingMementoAndServer() throws IOException, URISyntaxException {
        final VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(getAVGUpdatesDirectory(),
                new String[] {"VDB: avgsdk_vdb3157.zip", "IVDB: avgsdk_ivdb3157.zip"});
        hookDefintionProvider(redirectedDefinitonDownloader);
        
        VirusDefinitionDownloadMemento memento = new VirusDefinitionDownloadMemento();
        File updateFile = createTempIncompleteFileForMemento("avgsdk_vdb3133.zip");
        memento.setSaveFile(updateFile);
        memento.setIncompleteFile(updateFile);
        memento.setAntivirusUpdateType(AntivirusUpdateType.FULL);
        memento.setUri(new URI("http://asdsadsadagsdfgsdfmementas"));
        FileUtils.writeObject(manager.getMementoFile(), memento);
        
        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(3133, virusScanner.getDefinitionsVersion());
        manager.checkForDefinitions();
        assertEquals(3157, virusScanner.getDefinitionsVersion());
    }
    
    /**
     * Downloading the update fails, ensure it can be subsequently be installed when the download recovers.
     */
    public void testFailedUpdateRecovery() {
        final VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(getAVGUpdatesDirectory(),
                new String[] {"VDB: avgsdk_vdb3133.zip"}) {
            boolean attempted = false;
            @Override
            public void fetch(VirusDefinitionHandler handler, File mementoFile, File mementoBackupFile) {
                if (!attempted && name.equals("avgsdk_vdb3133.zip")) {
                    handler.downloadFailed(null);
                    attempted = true;
                } 
                else {
                    super.fetch(handler, mementoFile, mementoBackupFile);                    
                }
            }
        };
        hookDefintionProvider(redirectedDefinitonDownloader);
            
        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.checkForDefinitions();
        assertEquals(3133, virusScanner.getDefinitionsVersion());
    }

    /**
     * Resuming download from a memento update fails, should call back to the server and download
     *  the latest update from their instead.
     */
    public void testMementoFailedUpdateRecovery() throws IOException, URISyntaxException {
        final VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(getAVGUpdatesDirectory(),
                new String[] {"VDB: avgsdk_vdb3133.zip"}) {
            @Override
            public void fetch(VirusDefinitionHandler handler, File mementoFile, File mementoBackupFile) {
                if (memento != null) {
                    handler.downloadFailed(null);
                } 
                else {
                    super.fetch(handler, mementoFile, mementoBackupFile);                    
                }
            }
        };
        hookDefintionProvider(redirectedDefinitonDownloader);
        
        VirusDefinitionDownloadMemento memento = new VirusDefinitionDownloadMemento();
        File updateFile = createTempIncompleteFileForMemento("avgsdk_vdb3157.zip");
        memento.setSaveFile(updateFile);
        memento.setIncompleteFile(updateFile);
        memento.setAntivirusUpdateType(AntivirusUpdateType.FULL);
        memento.setUri(new URI("http://asdsadsadagsdfgsdfmementas"));
        FileUtils.writeObject(manager.getMementoFile(), memento);
        
        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(3133, virusScanner.getDefinitionsVersion());
    }
    
    /**
     * Try to update however the first attempt to download the nfo fails.  On retry everything should function
     *  normally.
     */
    public void testFirstNfoDownloadFailed() {
        final VirusDefinitionDownloader redirectedDefinitonDownloader = new RedirectedVirusDefinitionDownloader(getAVGUpdatesDirectory(),
                new String[] {"VDB: avgsdk_vdb3133.zip"}) {
            boolean attempted = false;
            @Override
            public void fetch(VirusDefinitionHandler handler, File mementoFile, File mementoBackupFile) {
                if (!attempted && name.equals("current.nfo")) {
                    handler.downloadFailed(null);
                    attempted = true;
                } 
                else {
                    super.fetch(handler, mementoFile, mementoBackupFile);                    
                }
            }
        };
        hookDefintionProvider(redirectedDefinitonDownloader);
            
        // Test Updates
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.start();
        assertEquals(0, virusScanner.getDefinitionsVersion());
        manager.checkForDefinitions();
        assertEquals(3133, virusScanner.getDefinitionsVersion());           
    }
   
    
    /**
     * Copies an update file so it can be used with a memento and is safe for deletion after
     *  the downloader operation completes.
     */
    private File createTempIncompleteFileForMemento(String updateFileName) {
        File originalUpdateFile = new File(getAVGUpdatesDirectory(), updateFileName);
        assert originalUpdateFile.exists();
        File mementoUpdateFile = new File(CommonUtils.getUserSettingsDir(), updateFileName);
        CommonUtils.getUserSettingsDir().mkdirs();
        FileUtils.copy(originalUpdateFile, mementoUpdateFile);
        assert mementoUpdateFile.exists();
        return mementoUpdateFile;
    }

    /**
     * Completes the circular link between the {@link VirusDefinitionDownloader} and the {@link VirusScanner}
     */
    private void hookDefintionProvider(final VirusDefinitionDownloader virusDefintionDownloader) {
        virusDefinitionDownloaderProvider.set(virusDefintionDownloader);
    }

    /**
     * A heavy provider mock that supports setting the instance to return after construction.
     */
    class MutatableProvider<C> implements Provider<C> {
        private C objectToProvide;
        private void set(C objectToProvide) {
            this.objectToProvide = objectToProvide;
        }
        @Override
        public C get() {
            return objectToProvide;
        }
    }
}
