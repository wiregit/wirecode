package com.limegroup.gnutella.malware;

import java.io.File;
import java.io.IOException;

import org.jmock.Mockery;
import org.limewire.core.settings.FilterSettings;
import org.limewire.gnutella.tests.LimeTestCase;
import org.limewire.io.Expand;
import org.limewire.util.FileUtils;

public class VirusScannerImplTest extends LimeTestCase {
    private static final String AVG_ROOT_ENV = "AVG_ROOT";
    private File testFiles = null;
       
    /**
     * Returns the root directory containing avg testing files. 
     */
    public static File getAVGRootEnvironment() {
        return getFileFromEnvironmentVariable(AVG_ROOT_ENV);
    }
    
    public static File getAVGUpdatesDirectory() {
        return new File(VirusScannerImplTest.getAVGRootEnvironment(), "avg-updates");
    }
    
    @Override
    protected void setUp() throws Exception {
        testFiles = new File(getAVGRootEnvironment(), "test-files");
        FilterSettings.TEST_VIRUS_SCANNER.setValue(true);
        FileUtils.deleteRecursive(VirusUtils.getDatabaseDirectory());
        FileUtils.copyDirectory(new File(getAVGRootEnvironment(), "database"), VirusUtils.getDatabaseDirectory());
        FileUtils.copy(new File(getAVGRootEnvironment(), "avg-test/license"), VirusUtils.getLicenseFile());
    }
    
    public void testNonExistantFile() throws Exception {
        Mockery context = new Mockery();
        VirusDefinitionManager virusDefinitionManager = context.mock(VirusDefinitionManager.class);
        VirusScanner virusScanner = new VirusScannerImpl(virusDefinitionManager, new MockAntivirusSupportConfiguration());
        File testFile = new File(testFiles, "zasdasd.txt");
        assertFalse(testFile.exists());
        assertFalse(virusScanner.isInfected(testFile));
    }
    
    public void testNonInfectedFile() throws Exception {
        Mockery context = new Mockery();
        VirusDefinitionManager virusDefinitionManager = context.mock(VirusDefinitionManager.class);
        VirusScanner virusScanner = new VirusScannerImpl(virusDefinitionManager, new MockAntivirusSupportConfiguration());
        File testFile = new File(testFiles, "ok1.txt");
        assertTrue(testFile.exists());
        assertFalse(virusScanner.isInfected(testFile));
    }
    
    public void testInfectedFile() throws Exception {
        Mockery context = new Mockery();
        VirusDefinitionManager virusDefinitionManager = context.mock(VirusDefinitionManager.class);
        VirusScanner virusScanner = new VirusScannerImpl(virusDefinitionManager, new MockAntivirusSupportConfiguration());
        File testFile = new File(testFiles, "eicar.com");
        assertTrue(testFile.exists());
        assertTrue(virusScanner.isInfected(testFile));
    }
    
    public void testNoDefinitionsGettingVersion() throws Exception {
        FileUtils.deleteRecursive(VirusUtils.getDatabaseDirectory());
        Mockery context = new Mockery();
        VirusDefinitionManager virusDefinitionManager = context.mock(VirusDefinitionManager.class);
        VirusScanner virusScanner = new VirusScannerImpl(virusDefinitionManager, new MockAntivirusSupportConfiguration());
        assertEquals(0, virusScanner.getDefinitionsVersion());
    }
    
    public void testDefinitionsGettingVersion() throws Exception {
        Mockery context = new Mockery();
        VirusDefinitionManager virusDefinitionManager = context.mock(VirusDefinitionManager.class);
        VirusScanner virusScanner = new VirusScannerImpl(virusDefinitionManager, new MockAntivirusSupportConfiguration());
        assertEquals(3157, virusScanner.getDefinitionsVersion());
    }
    
    public void testGettingLibraryVersionNumber() throws Exception {
        Mockery context = new Mockery();
        VirusDefinitionManager virusDefinitionManager = context.mock(VirusDefinitionManager.class);
        VirusScanner virusScanner = new VirusScannerImpl(virusDefinitionManager, new MockAntivirusSupportConfiguration());
        assertEquals(8425, virusScanner.getLibraryBuildVersion());
    }
    
    public void testLoadFullUpdate() throws Exception {
        Mockery context = new Mockery();
        VirusDefinitionManager virusDefinitionManager = context.mock(VirusDefinitionManager.class);
        VirusScanner virusScanner = new VirusScannerImpl(virusDefinitionManager, new MockAntivirusSupportConfiguration());
        assertEquals(3157, virusScanner.getDefinitionsVersion());
        virusScanner.loadFullUpdate(getUpdateDirectory("avgsdk_vdb3158.zip"));
        assertEquals(3158, virusScanner.getDefinitionsVersion());
    }

    private File getUpdateDirectory(String updateName) throws IOException {
        File tempDir = File.createTempFile("tmp", "");
        tempDir.delete();
        tempDir.mkdirs();
        File zipFile = new File(getAVGUpdatesDirectory(), updateName);
        Expand.expandFile(zipFile, tempDir);
        return new File(tempDir, FileUtils.getFilenameNoExtension(updateName));
    }
    
    public void testLoadIncrementalUpdate() throws Exception {
        Mockery context = new Mockery();
        VirusDefinitionManager virusDefinitionManager = context.mock(VirusDefinitionManager.class);
        VirusScanner virusScanner = new VirusScannerImpl(virusDefinitionManager, new MockAntivirusSupportConfiguration());
        assertEquals(3157, virusScanner.getDefinitionsVersion());
        virusScanner.loadIncrementalUpdate(getUpdateDirectory("avgsdk_ivdb3158.zip"));
        assertEquals(3158, virusScanner.getDefinitionsVersion());
    }
    
    private static File getFileFromEnvironmentVariable(String environmentVariable) {
        File file = null;
        try {
            String fileEnvPath = System.getenv(environmentVariable);
            if(fileEnvPath != null && !fileEnvPath.trim().equals("")) {
                file = new File(fileEnvPath);
            }
        } catch(SecurityException ignore) {
        }
        return file;
    }
}
