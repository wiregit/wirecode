package com.limegroup.gnutella.malware;

import java.io.File;

import org.jmock.Mockery;
import org.limewire.core.settings.FilterSettings;
import org.limewire.gnutella.tests.LimeTestCase;
import org.limewire.util.FileUtils;

public class VirusScannerImplTest extends LimeTestCase {
    private static final String AVG_LICENSE_ENV = "AVG_LICENSE";
    private static final String AVG_DATABASE_ENV = "AVG_DATABASE";
    private File testFiles = new File("C:/files/test-files/");
       
    @Override
    protected void setUp() throws Exception {
        FilterSettings.TEST_VIRUS_SCANNER.setValue(true);
        FileUtils.deleteRecursive(VirusUtils.getDatabaseDirectory());
        FileUtils.copyDirectory(getFileFromEnvironmentVariable(AVG_DATABASE_ENV), VirusUtils.getDatabaseDirectory());
        FileUtils.copy(getFileFromEnvironmentVariable(AVG_LICENSE_ENV), VirusUtils.getLicenseFile());
    }
    
    public void testNonExistantFile() throws Exception {
        Mockery context = new Mockery();
        VirusDefinitionManager virusDefinitionManager = context.mock(VirusDefinitionManager.class);
        VirusScanner virusScanner = new VirusScannerImpl(virusDefinitionManager);
        File testFile = new File(testFiles, "zasdasd.txt");
        assertFalse(testFile.exists());
        assertFalse(virusScanner.isInfected(testFile));
    }
    
    public void testNonInfectedFile() throws Exception {
        Mockery context = new Mockery();
        VirusDefinitionManager virusDefinitionManager = context.mock(VirusDefinitionManager.class);
        VirusScanner virusScanner = new VirusScannerImpl(virusDefinitionManager);
        File testFile = new File(testFiles, "ok1.txt");
        assertTrue(testFile.exists());
        assertFalse(virusScanner.isInfected(testFile));
    }
    
    public void testInfectedFile() throws Exception {
        Mockery context = new Mockery();
        VirusDefinitionManager virusDefinitionManager = context.mock(VirusDefinitionManager.class);
        VirusScanner virusScanner = new VirusScannerImpl(virusDefinitionManager);
        File testFile = new File(testFiles, "eicar.com");
        assertTrue(testFile.exists());
        assertTrue(virusScanner.isInfected(testFile));
    }
    
    private static File getFileFromEnvironmentVariable(String environmentVariable) {
        File file = null;
        try {
            String fileEnvPath = System.getenv(environmentVariable);
            if(fileEnvPath != null && !fileEnvPath.trim().equals("")) {
                file = new File(fileEnvPath);
            }
        } catch(SecurityException ignore) {
        }
        return file;
    }
}
