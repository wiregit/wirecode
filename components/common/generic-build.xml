<?xml version="1.0" encoding="UTF-8"?>

<project name="generic-build" basedir="." default="compile-src" xmlns:ivy="antlib:org.apache.ivy.ant">

    <description>
        A generic build script for a single component.
        Compiling a component with dependencies will compile and
        locally publish all its dependencies.
    </description>
	
	<import file="ant-macros.xml"/>
    
    <target name="initialize" depends="ivy-load" unless="initialized.${component}">
        <do.setup-properties component="${component}"/>
    </target>
	
	<target name="publish-dependencies" depends="initialize" unless="ivy.dependencies.published">
	    <property name="ivy.dependencies.published" value="true"/>
        <do.subant dir="${limewire.home}" includes="**/build.xml" root="${component}" target="publish" excluderoot="true"/>
	</target>
	
	<target name="clean" depends="initialize">
	    <do.clean component="${component}"/>
	</target>
    
    <target name="compile" depends="compile-src, compile-tests">
    </target>
	
	<target name="compile-src" depends="publish-dependencies">
	    <do.compile-src component="${component}"/>
	</target>
    
	<target name="clean-src" depends="initialize">
	    <do.clean-src component="${component}"/>
	</target>
	
	<target name="compile-tests" depends="compile-src">
	    <do.compile-tests component="${component}"/>
	</target>
    
	<target name="clean-tests" depends="initialize">
	    <do.clean-tests component="${component}"/>
	</target>
	
	<target name="test" depends="compile">
	    <do.test component="${component}" class="${class}"/>
	</target>
	
	<target name="test-package" depends="compile">
	    <do.test-package component="${component}" package="${package}"/>
	</target>
	
	<target name="test-all" depends="compile">
	    <do.test-all component="${component}"/>
	</target>
	
	<target name="tests2html" depends="initialize">
        <do.tests2html component="${component}"/>
    </target>
    
    <target name="jar" depends="compile-src">
        <do.jar component="${component}"/>
    </target>
    
    <target name="javadoc" depends="compile-src">
    	<do.javadoc component="${component}"/>
	</target>
	
	<target name="publish" depends="jar">
	   <do.publish component="${component}"/>
    </target>
    
    <target name="clean-dist" depends="initialize">
        <do.clean-dist component="${component}"/>
    </target>
    
    <target name="with.clover" depends="initialize">
        <do.clover-setup component="${component}"/>
	</target>
    
    <target name="clover2html" depends="with.clover">
        <do.clover2html component="${component}"/>
    </target>
    
    <macrodef name="do.setup-properties" description="Sets up common properties every macro uses.">
    	<attribute name="component"/>
        
        <sequential>
            <property name="initialized.@{component}" value="true"/>
            
            <!-- paths for src java files, test java files, and resource files -->
        	<property name="limewire.components.@{component}.home"
        		      location="${limewire.components.home}/@{component}"/>
        	<property name="limewire.components.@{component}.src.home"
        			  location="${limewire.components.@{component}.home}/src/main"/>	
        	<property name="limewire.components.@{component}.src"
            		  location="${limewire.components.@{component}.src.home}/java"/>            		  
        	<property name="limewire.components.@{component}.src.resources"
            		  location="${limewire.components.@{component}.src.home}/resources"/>
            <property name="limewire.components.@{component}.tests.home"
        			  location="${limewire.components.@{component}.home}/src/test"/>
          	<property name="limewire.components.@{component}.tests"
              		  location="${limewire.components.@{component}.tests.home}/java"/>
          	<property name="limewire.components.@{component}.tests.resources"
              		  location="${limewire.components.@{component}.tests.home}/resources"/>
            
            <!-- paths for compiling src & test -->
        	<property name="build.limewire.components.@{component}.home"
        		      location="${limewire.components.@{component}.home}/build"/>
        	<property name="build.limewire.components.@{component}.classes"
        			  location="${build.limewire.components.@{component}.home}/classes"/>
            <property name="build.limewire.components.@{component}.lib"
        			  location="${build.limewire.components.@{component}.home}/lib"/>	
        	<property name="build.limewire.components.@{component}.tests"
        			  location="${build.limewire.components.@{component}.home}/tests"/>
        	
        	<!-- paths for test runtime. -->
        	<property name="tests.limewire.components.@{component}.home"
        		      location="${limewire.components.@{component}.home}/testData"/>  		      
            <property name="tests.limewire.components.@{component}.xml"
            		  location="${tests.limewire.components.@{component}.home}/xml"/>
            <property name="tests.limewire.components.@{component}.html"
            		  location="${tests.limewire.components.@{component}.home}/html"/>
            
            <!-- paths for clover output -->
            <property name="clover.limewire.components.@{component}.home"
			          location="${limewire.components.@{component}.home}/clover"/>
            <property name="clover.limewire.components.@{component}.db"
                      location="${clover.limewire.components.@{component}.home}/clover.db"/>      			          
            <property name="clover.limewire.components.@{component}.html"
			          location="${clover.limewire.components.@{component}.home}/html"/>
            <property name="clover.limewire.components.@{component}.xml"
			          location="${clover.limewire.components.@{component}.home}/coverage.xml"/>
            
            <!-- paths for distribution files, including javadoc & jar. -->
            <property name="dist.limewire.components.@{component}.home"
                      location="${limewire.components.@{component}.home}/dist"/>
            <property name="dist.limewire.components.@{component}.javadoc"
            		  location="${dist.limewire.components.@{component}.home}/javadoc"/>
            <property name="dist.limewire.components.@{component}.jar"
            		  location="${dist.limewire.components.@{component}.home}/lw-@{component}.jar"/>
            
            <!-- whether or not to write tests to file instead of stdout. -->
            <property name="tests.writetofileonly" value="false"/>
       	
       	    <!-- the src build classpath -->
        	<path id="build.limewire.components.@{component}.src.classpath">
                <!-- TODO parameterize 'compile' with ivy-module configuration name -->
                <fileset dir="${build.limewire.components.@{component}.lib}/compile/" includes="**/*"/> <!-- ivy src dependencies -->
        	</path>
            
            <!-- the tests build classpath -->
    	    <path id="build.limewire.components.@{component}.tests.classpath">
	        	<!-- TODO parameterize 'test' with ivy-module configuration name -->
                <pathelement location="${build.limewire.components.@{component}.classes}"/>
                <fileset dir="${build.limewire.components.@{component}.lib}/test/" includes="**/*"/> <!-- ivy test dependencies -->
    	    </path>
        	
        	<!-- the tests junit runtime classpath -->
        	<path id="tests.limewire.components.@{component}.classpath">
        	    <pathelement location="${limewire.components.@{component}.src.resources}"/> <!-- src resources -->
        	    <pathelement location="${limewire.components.@{component}.tests.resources}"/> <!-- test resources -->
        		<pathelement location="${build.limewire.components.@{component}.tests}"/> <!-- test compile results -->
        		<path refid="build.limewire.components.@{component}.tests.classpath"/> <!-- test compile classpath -->
           	    <pathelement location="${cloverjar}"/> <!-- clover -->
        	</path>        	
        	
            <ivy:configure file="${limewire.ivy.home}/ivysettings.xml" override="true"/>
        </sequential>
    </macrodef>
    
    <macrodef name="do.clean" description="Cleans all generated directories.">
    	<attribute name="component"/>
		<sequential>
            <echo message="cleaning @{component}..." />
        	<do.clean-testData component="@{component}"/>
		    <do.clean-build    component="@{component}"/>
			<do.clean-dist     component="@{component}"/>
		    <do.clean-clover   component="@{component}"/>
		</sequential>
	</macrodef>
    
    <macrodef name="do.resolve-dependencies" description="retreive dependencies with ivy">
        <attribute name="component"/>
        <attribute name="conf"/>
        <attribute name="ivy.file" default="${limewire.components.@{component}.home}/ivy.xml"/>
        <sequential>
            <mkdir dir="${build.limewire.components.@{component}.lib}/@{conf}"/>
            <ivy:resolve  conf="@{conf}"
                          file="@{ivy.file}"
                          log="quiet"/>
            <ivy:retrieve
                     conf="@{conf}"
                     pattern="${build.limewire.components.@{component}.lib}/[conf]/[type]/[artifact]-[revision].[ext]"
                     sync="true"
                     symlink="true"
                     log="quiet"/>
            <!-- because ivy:retrieve has sync==true, if there are no dependencies, the dir will be removed.
                 we don't want it removed, because then javac fails because the classpath is missing. -->
            <mkdir dir="${build.limewire.components.@{component}.lib}/@{conf}"/>
        </sequential>
    </macrodef>
	
	<macrodef name="do.compile-src" description="Compiles only the source code.">
	    <attribute name="component"/>
	    <element name="more-src-paths" optional="true"/>
	    <attribute name="excludes" default=""/>
	    <sequential>
            <echo message="compiling source for @{component}..." />
	        <do.build-init component="@{component}"/>
            <mkdir dir="${limewire.components.@{component}.src}"/>
			<mkdir dir="${build.limewire.components.@{component}.classes}"/>
            <do.resolve-dependencies component="@{component}" conf="compile"/>
			<javac destdir		="${build.limewire.components.@{component}.classes}"
 				   debug	    ="${compile.debug}"
				   deprecation  ="${compile.deprecation}"
	 	           optimize     ="${compile.optimize}"
				   encoding     ="UTF-8"
		           source		="${compile.source}"
	  	           target       ="${compile.target}"
	 	           sourcepath   =""
			       excludes     ="@{excludes}"
	 	    >
			    <compilerarg value="-Xlint:unchecked"/>
				<src>
					<pathelement location="${limewire.components.@{component}.src}"/>
				    <more-src-paths/>
			    </src>
				<classpath refid="build.limewire.components.@{component}.src.classpath"/>
			</javac>
	    </sequential>
	</macrodef>
    
    <macrodef name="do.clean-src" description="Cleans generated classfiles from compiling source.">
        <attribute name="component"/>
        <sequential>
            <echo message="cleaning @{component}..." />
			<delete dir="${build.limewire.components.@{component}.classes}" />
        </sequential>
    </macrodef>
	
	<macrodef name="do.compile-tests" description="Compiles test code and copies resources tests use.">
	    <attribute name="component"/>
		<sequential>
            <echo message="compiling tests for @{component}..." />
            <mkdir dir="${limewire.components.@{component}.tests}"/>
			<mkdir dir="${build.limewire.components.@{component}.tests}"/>
            <do.resolve-dependencies component="@{component}" conf="test"/>
			<javac destdir		="${build.limewire.components.@{component}.tests}"
 				   debug	    ="${compile.debug}"
				   deprecation  ="${compile.deprecation}"
	   	   		   optimize     ="${compile.optimize}"
				   encoding     ="ISO-8859-1"
	    	       source		="${compile.source}"
	        	   target       ="${compile.target}"
	        	   srcdir       ="${limewire.components.@{component}.tests}"
	   		>
				<classpath refid="build.limewire.components.@{component}.tests.classpath"/>
			</javac>
		</sequential>
	</macrodef>
    
	<macrodef name="do.clean-tests" description="Cleans generated classfiles and resources from compiling tests.">
	    <attribute name="component"/>
	    <sequential>
			<delete dir="${build.limewire.components.@{component}.tests}" />
	    </sequential>
	</macrodef>
    
	<macrodef name="do.clean-testData" description="Cleans any data generated by running tests.">
	    <attribute name="component"/>
	    <sequential>
			<delete dir="${tests.limewire.components.@{component}.home}" />
	    </sequential>
	</macrodef>
	
	<macrodef name="do.test" description="Runs a single test class.">
	    <attribute name="component"/>
	    <attribute name="class"/>
	    <attribute name="path" default="org/limewire"/>
	    <sequential>
	    	<do.clean-testData component="@{component}"/>
	        <do.tests-init     component="@{component}"/>
			<do.run-tests-batchunit 
			                   haltonerror="true"
						       haltonfailure="true"
						       unit="@{path}/@{class}.class"
   			    			   component="@{component}"
			/>
	    </sequential>
	</macrodef>
	
	<macrodef name="do.test-package" description="Runs all tests in a single package.">
	    <attribute name="component"/>
	    <attribute name="package"/>
	    <attribute name="path" default="org/limewire"/>
	    <attribute name="forkmode" default="once"/>
	    <sequential>
	        <do.clean-testData      component="@{component}"/>
	        <do.tests-init          component="@{component}"/>
			<do.run-tests-batchunit unit="@{path}/@{package}/*Test.class"
									component="@{component}"
			    					forkmode="@{forkmode}"
			/>
	    </sequential>
	</macrodef>
	
	<macrodef name="do.test-all" description="Runs all tests.">
	    <attribute name="component"/>
	    <element name="testLocations"  optional="true"/>
	    <attribute name="forkmode"     default="perTest"/>
	    <attribute name="filter"     default="**/*Test.class"/>
	    <sequential>
	        <do.clean-testData      component="@{component}"/>
	        <do.tests-init          component="@{component}"/>
	        <do.run-tests-batchunit unit="@{filter}"
	            					component="@{component}"
	            					forkmode="@{forkmode}"
	        >
	        	<testPathLocations>
	        	   <testLocations/>
	            </testPathLocations>
	        </do.run-tests-batchunit>
	    </sequential>
	</macrodef>
    
    <macrodef name="do.jar" description="Generates a jar of the classfiles.">
    	<attribute name="component"/>
    	<element name="more-jar-elements" optional="true"/>
        <attribute name="basedir"     default="${build.limewire.components.@{component}.classes}"/>
        <attribute name="resourcedir" default="${limewire.components.@{component}.src.resources}"/>
        <attribute name="resexclude"  default=""/>
        <attribute name="compress"    default="false"/>
        <attribute name="excludes"    default=""/>
        <sequential>
            <do.dist-init component="@{component}"/>
            <delete file="${dist.limewire.components.@{component}.jar}"/>
            <mkdir dir="${limewire.components.@{component}.src.resources}"/>
            <jar destfile="${dist.limewire.components.@{component}.jar}"
            	 compress="@{compress}"
                 basedir="@{basedir}"
                 excludes="@{excludes}"
            >
                <fileset dir="@{resourcedir}" excludes="@{resexclude}"/>
                <more-jar-elements/>
            </jar>
        </sequential>
    </macrodef>
    
    <macrodef name="do.publish" description="Publishes the jar to the local repository.">
        <attribute name="component"/>
        <sequential>
            <ivy:publish resolver="local"
                         overwrite="true"
                         forcedeliver="true"
                         artifactspattern="${dist.limewire.components.@{component}.jar}"
                         srcivypattern="${dist.limewire.components.@{component}.home}/ivy.xml"/>
        </sequential>
    </macrodef>
    
    <tstamp>
        <format property="timestamp.today" pattern="EEEE, MMMM d yyyy"/>
    </tstamp>
    
    <macrodef name="do.javadoc" description="Generates a javadoc for the source.">
    	<attribute name="component"/>
        <attribute name="windowtitle" default="LimeWire @{component} Component API for ${timestamp.today}"/>
        <attribute name="doctitle" default="LimeWire @{component} Component API &lt;br/&gt; for ${timestamp.today}"/>
        <attribute name="header" default="LimeWire @{component} Component API"/>
        <element name="more-javadoc-elements" optional="true"/>
        <attribute name="classpathrefid" default="build.limewire.components.@{component}.src.classpath"/>
        <attribute name="sourcepath" default="${limewire.components.@{component}.src}"/>
        <attribute name="includes" default="**/*.java"/>
        <attribute name="excludes" default=""/>
    	<sequential>
    	    <delete dir="${dist.limewire.components.@{component}.javadoc}"/>
    	    <mkdir dir="${dist.limewire.components.@{component}.javadoc}"/>
    	    <javadoc destdir="${dist.limewire.components.@{component}.javadoc}"
                     windowtitle="@{windowtitle}"
                     header="@{header}"
                     doctitle="@{doctitle}"                     
    	        	 use="true"
                     author="false"
    	        	 version="false"
					 packagenames="*"
                     useexternalfile="yes">
                <link href="http://java.sun.com/javase/6/docs/api/"/>
                <link href="http://jakarta.apache.org/commons/logging/apidocs/"/>
                <link href="http://www.icu-project.org/apiref/icu4j/"/>
                <link href="http://www.limewire.org/nightly/modules/collection/api/"/>
                <link href="http://www.limewire.org/nightly/modules/common/api/"/>
                <link href="http://www.limewire.org/nightly/modules/geocode/api/"/>
                <link href="http://www.limewire.org/nightly/modules/lwsserver/api/"/>
                <link href="http://www.limewire.org/nightly/modules/promotion/api/"/>
                <link href="http://www.limewire.org/nightly/modules/core/api/"/>
                <link href="http://www.limewire.org/nightly/modules/io/api/"/>
                <link href="http://www.limewire.org/nightly/modules/mojito/api/"/>
                <link href="http://www.limewire.org/nightly/modules/mojito-ui/api/"/>
                <link href="http://www.limewire.org/nightly/modules/nio/api/"/>
                <link href="http://www.limewire.org/nightly/modules/rudp/api/"/>
                <link href="http://www.limewire.org/nightly/modules/security/api/"/>
                <link href="http://www.limewire.org/nightly/modules/setting/api/"/>
                <link href="http://www.limewire.org/nightly/modules/statistic/api/"/>
                <link href="http://www.limewire.org/nightly/modules/test-util/api/"/>
				<!-- TODO: add more components as time goes on, and figure out a way to not require this. -->
				
     	        <classpath refid="@{classpathrefid}"/>
                <!--sourcepath location="@{sourcepath}"/-->
                <sourcefiles>
                    <fileset dir="@{sourcepath}" includes="@{includes}" excludes="@{excludes}"/>
                </sourcefiles>
     	        <more-javadoc-elements/>
    	    </javadoc>
	    </sequential>
    </macrodef>
	
	<macrodef name="do.run-tests-batchunit">
		<attribute name="component"/>
	    <attribute name="unit"/>
	    <attribute name="haltOnFailure"     default="false"/>
	    <attribute name="haltOnError"	    default="false"/>
	    <attribute name="nativePathRefId"   default="limewire.library.path"/>
	    <element   name="testPathLocations" optional="true"/>
	    <attribute name="forkmode"			default="once"/>
	    <sequential>
	        <junit printsummary="withOutAndErr"
	    	       haltonfailure="@{haltOnFailure}"
	    		   haltonerror="@{haltOnError}"
	    		   failureproperty="testsfailed"
	    	       showoutput="true"
	    	       fork="true"
	           	   forkmode="@{forkmode}"
	        	   timeout="1200000"
	    	>
	            <sysproperty key="java.library.path"      		 value="${@{nativePathRefId}}"/>
	    		<sysproperty key="junit.test.method"      		 value="${method}"/>
	    		<sysproperty key="junit.test.times"        		 value="${times}"/>
	    	    <sysproperty key="junit.test.hidetestname"		 value="${hidetestname}"/>
	            <sysproperty key="junit.test.ignoreErrorService" value="${ignoreErrorService}"/>
	            <jvmarg value="-Xmx512M"/>
	        	<jvmarg value="-ea"/>
	    		
	    		<classpath refid="tests.limewire.components.@{component}.classpath"/>
	    		
	    		<formatter type="xml"/>
	    		<formatter type="plain" usefile="${tests.writetofileonly}"/>
	    		
	    		<batchtest todir="${tests.limewire.components.@{component}.xml}">
	    			<fileset dir="${build.limewire.components.@{component}.tests}">
	    			    <include name="@{unit}"/>
	    		    </fileset>
	    		    <testPathLocations/>
	    		</batchtest>
			</junit>
		</sequential>
	</macrodef>
	
    <macrodef name="do.tests2html" description="Converts test XML output to HTML reports.">
        <attribute name="component"/>
        <element name="more-xml-locations" optional="true"/>
        <attribute name="dir" default="${tests.limewire.components.@{component}.xml}"/>
        <attribute name="include" default="TEST-*.xml"/>
        <attribute name="exclude" default=""/>
        <sequential>
	        <junitreport todir="${tests.limewire.components.@{component}.xml}\..">
	        	<fileset dir="@{dir}">
				    <include name="@{include}"/>
                    <exclude name="@{exclude}"/>
				</fileset>
	            <more-xml-locations/>
	        	<report format="frames" todir="${tests.limewire.components.@{component}.html}"/>
	       </junitreport>
        </sequential>
    </macrodef>
	
	<macrodef name="do.build-init" description="Initializes directories for building the code.">
	    <attribute name="component"/>
	    <sequential>
	    	<mkdir dir="${build.limewire.components.@{component}.home}" />
	    </sequential>
	</macrodef>
    
    <macrodef name="do.dist-init" description="Initializes directories for distribution.">
    	<attribute name="component"/>
    	<sequential>
    	    <mkdir dir="${dist.limewire.components.@{component}.home}"/>
    	</sequential>
    </macrodef>
	
	<macrodef name="do.tests-init" description="Initializes directories for running tests.">
	    <attribute name="component"/>
	    <sequential>
			<mkdir dir="${tests.limewire.components.@{component}.home}" />
			<mkdir dir="${tests.limewire.components.@{component}.html}" />
			<mkdir dir="${tests.limewire.components.@{component}.xml}" />
	    </sequential>
	</macrodef>
	
	<macrodef name="do.clean-build" description="Cleans all data related to building the code.">
	    <attribute name="component"/>
		<sequential>
			<delete dir="${build.limewire.components.@{component}.home}" />
		</sequential>
	</macrodef>
        
    <macrodef name="do.clean-dist" description="Cleans all distribution files and directories.">
        <attribute name="component"/>
        <sequential>
        	<delete dir="${dist.limewire.components.@{component}.home}"/>
        </sequential>
    </macrodef>
    
    <macrodef name="do.clean-clover" description="Erases clover data.">
    	<attribute name="component"/>
        <sequential>
            <delete dir="${clover.limewire.components.@{component}.home}"/>
        </sequential>
    </macrodef>
    
    <macrodef name="do.clover-setup" description="Sets up clover.">
    	<attribute name="component"/>
        <element name="locations" optional="true"/>
        <attribute name="defaultfileset" default="${limewire.components.@{component}.home}"/>
        <attribute name="clover.db.location" default="${clover.limewire.components.@{component}.db}"/>        
        <sequential>
	        <antcall target="clover-guard"/>
            <taskdef resource="cloverlib.xml"/>
            <mkdir dir="${clover.limewire.components.@{component}.home}"/>
            <clover-setup initstring="@{clover.db.location}">
                <statementContext name="log" regexp="^LOG\..*"/>
                <statementContext name="iflog" regexp="^if *\(LOG\.is.*"/> 
                <methodContext name="main" regexp="public static void main\(String args\[\]\).*"/>
                <fileset dir="@{defaultfileset}" includes="**/*.java"/>
                <locations/>
            </clover-setup>
        </sequential>
    </macrodef>
    
    <macrodef name="do.clover2html">
        <attribute name="component"/>
        <element name="moretestinfo" optional="true"/>
        <attribute name="defaulttestresults" default="${tests.limewire.components.@{component}.xml}"/>
        <attribute name="defaulttestsources" default="${limewire.components.@{component}.tests}"/>
        <attribute name="defaulttestsourceincludes" default="**/*.java"/>        
        <attribute name="clover.db.location" default="${clover.limewire.components.@{component}.db}"/>  
        <sequential>
            <antcall target="clover-guard"/>
            <tstamp>
	            <format property="clover.time" pattern="EEE, MMM d, yyyy hh:mm a"/>
            </tstamp>
            <clover-report initstring="@{clover.db.location}">
                <current outfile="${clover.limewire.components.@{component}.html}"
                		 title="LimeWire - ${clover.time}">
	                <format type="html" filter="log,iflog,assert,main"/>
                    <testresults dir="@{defaulttestresults}" includes="TEST-*.xml"/>
                    <testsources dir="@{defaulttestsources}" includes="@{defaulttestsourceincludes}"/>
                    <moretestinfo/>
                </current>
                <current outfile="${clover.limewire.components.@{component}.xml}"
                         title="LimeWire - ${clover.time}">
					<format type="xml" filter="log,iflog,assert,main"/>
                </current>
            </clover-report>
        </sequential>
    </macrodef>
	
</project>
